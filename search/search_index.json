{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lightrun enables you to debug your application by helping you witness real-time problems in real time, and in real environments. You can use Lightrun starting from the development environment, and also in the production environment. Use Lightrun to: - Reproduce the problem in a development or test environment - Review the correct runtime logs - View and analyze actual performance metrics Lightrun architecture \u00b6 Lightrun comprises these parts: Backend Server - the Lightrun server responsible for service management; this is the fundamental \"backbone\" of the platform. Lightrun sets this up for you, only after which you can install and run the Lightrun agents within your running apps. Java Agent - the JVMTI agent that runs alongside the application on your servers; this agent dynamically inserts commands in the code based on the actions you run. Client - the IDE plugin and command line utility; you can use either of them to add, remove and modify actions - whichever is part of your natural debugging workflow. These three components communicate with one another as illustrated in the following diagram: To get up and running: - Ensure Lightrun has installed the backend server for you and get your admin account details. - Install the agent on the relevant servers - Install the plugin in your local environments","title":"Overview"},{"location":"#lightrun-architecture","text":"Lightrun comprises these parts: Backend Server - the Lightrun server responsible for service management; this is the fundamental \"backbone\" of the platform. Lightrun sets this up for you, only after which you can install and run the Lightrun agents within your running apps. Java Agent - the JVMTI agent that runs alongside the application on your servers; this agent dynamically inserts commands in the code based on the actions you run. Client - the IDE plugin and command line utility; you can use either of them to add, remove and modify actions - whichever is part of your natural debugging workflow. These three components communicate with one another as illustrated in the following diagram: To get up and running: - Ensure Lightrun has installed the backend server for you and get your admin account details. - Install the agent on the relevant servers - Install the plugin in your local environments","title":"Lightrun architecture"},{"location":"adminexceptions/","text":"Lightrun has the ability to monitor all the exceptions thrown in the application and give insights about them. Note: By default, every exception in the application will be reported, even ones that get caught along the way. Configuring the Agent {#_configuring_the_agent} \u00b6 In order to configure the agent to report the exceptions to the server follow these steps: Go to the folder of the agent Open the agent.config file Find the property exceptions_monitoring_enabled and set it to 1 . It should look like this: exceptions_monitoring_enabled=1 In case you want the agent to ignore exceptions that are caught along the way, find and set the exceptions_should_report_caught property to 0 . Restart your application with the agent The Server {#_the_server} \u00b6 In the server you'll be able to see general statistics about the exceptions and details of specific exceptions. To view the exceptions table, click Exceptions \u2192 Data In this page you'll be able to see a table with statistics on all the exceptions thrown by all your applications. In the top right corner of the screen there are search options. You can search with free text and by specific time frames or by custom range. Clicking on a specific type of exception in the table will open a modal with more details on the exception. Clicking on a specific exception in the table (or navigating using the \\\"Previous/Next Exception\\\" buttons above) you'll be able to see the stacktrace of each specific exception, and for each frame in the stacktrace you can see the snapshot of the frame.","title":"Configure and monitor exceptions"},{"location":"adminexceptions/#configuring-the-agent-_configuring_the_agent","text":"In order to configure the agent to report the exceptions to the server follow these steps: Go to the folder of the agent Open the agent.config file Find the property exceptions_monitoring_enabled and set it to 1 . It should look like this: exceptions_monitoring_enabled=1 In case you want the agent to ignore exceptions that are caught along the way, find and set the exceptions_should_report_caught property to 0 . Restart your application with the agent","title":"Configuring the Agent {#_configuring_the_agent}"},{"location":"adminexceptions/#the-server-_the_server","text":"In the server you'll be able to see general statistics about the exceptions and details of specific exceptions. To view the exceptions table, click Exceptions \u2192 Data In this page you'll be able to see a table with statistics on all the exceptions thrown by all your applications. In the top right corner of the screen there are search options. You can search with free text and by specific time frames or by custom range. Clicking on a specific type of exception in the table will open a modal with more details on the exception. Clicking on a specific exception in the table (or navigating using the \\\"Previous/Next Exception\\\" buttons above) you'll be able to see the stacktrace of each specific exception, and for each frame in the stacktrace you can see the snapshot of the frame.","title":"The Server {#_the_server}"},{"location":"agentadmin/","text":"The agent is at the core of Lightrun. Setting up agents is the most important task once the backend is in place. ::: {.tip} For elaborate agent setups please check out the Agent Integrations . ::: Tagging {#_tagging} \u00b6 Tagging lets us group agents together for common functionality under a meaningful name. E.g. Database Servers, Staging, 18GB Machines etc. We can use any set of tags to define an agent. This would allow binding actions to an agent even before it was launched as well as applying an action to a cross section of servers. We tag an agent by editing the file agent.metadata.json e.g.: { \"registration\" : { \"tags\" : [ { \"name\" : \"ProductionsAgents\" }, { \"name\" : \"JDK1.8\" }, { \"name\" : \"Ubuntu16\" } ] } } We can add/remove entries within the \\\"tags\\\" section. ::: {.note} Changes to this file aren't detected dynamically. An agent restart would be required ::: Once we bind an action to a tag it will be added implicitly to the tagged agents. This can be useful for many cases. E.g. integration tests can execute with a specific tag, that lets us debug an integration test failure by binding an action based on a tag. Tags can also be defined in the command line e.g. java -Dlightrun.registration.tags = myTag -agentpath:/path/to/agent/lightrun_agent.so RestOfTheArgumentsHere Customization {#_customization} \u00b6 Dynamic Logger {#_dynamic_logger} \u00b6 The inserted logs are printed using java.util.logging logger. You can customize the log prints by adding -Djava.util.logging.config.file=/path/to/app.properties to the command line. Agent Config {#_agent_config} \u00b6 There are a few parameters we can tune in order to change the agent configuration. The configuration file is located under <install_dir>/agent/agent.config . +-----------------------------------+-----------------------------------+ | Parameter Name | Explanation | +===================================+===================================+ | max_dynamic_log_rate | Number of log prints per second | | | (on average). | +-----------------------------------+-----------------------------------+ | max_dynamic_log_bytes_rate | Number of bytes per second (on | | | average). | +-----------------------------------+-----------------------------------+ | log_stats_time_micros | How often to log debugger | | | performance stats. | +-----------------------------------+-----------------------------------+ | max_condition_cost | Maximum cost in percentage of CPU | | | consumption of condition | | | evaluation. | +-----------------------------------+-----------------------------------+ | max_log_cpu_cost | Maximum cost of dynamic logging | | | in percentage of CPU consumption | | | (short bursts are allowed). | +-----------------------------------+-----------------------------------+ | max_snapshot_buffer_size | The total size in bytes we allow | | | to evaluate when capturing a | | | snapshot | +-----------------------------------+-----------------------------------+ | max_snapshot_frame_count | Max frame count we allow to | | | collect data from when capturing | | | a snapshot | +-----------------------------------+-----------------------------------+ | breakpoint_expiration_sec | Breakpoint \\ Dynamic log | | | expiration in seconds. | +-----------------------------------+-----------------------------------+ | dynamic_log_quota_recovery_ms | Time to pause dynamic log after | | | it runs out of quota. | +-----------------------------------+-----------------------------------+ | no_check_certificate | Disable certificate pinning when | | | accessing the backend | +-----------------------------------+-----------------------------------+ | ignore_quota | Disable all performance safe | | | guards when evaluating a | | | breakpoint. Not Recommended | +-----------------------------------+-----------------------------------+ | exceptions_monitoring_enabled | Enable the capturing of the | | | application's exceptions | +-----------------------------------+-----------------------------------+ | exceptions_monitoring_stdout | Print all of the captured | | | exceptions to the standard output | +-----------------------------------+-----------------------------------+ | exceptions_report_percentage | Process and report only this | | | percentage of the exceptions | | | thrown by the debuggee (A float | | | between 0 and 1.0). | +-----------------------------------+-----------------------------------+ | exceptions_should_report_caught | Report exceptions that were | | | caught by the application as well | | | as exceptions that remained | | | uncaught | +-----------------------------------+-----------------------------------+ | exceptions_max_buffer_size | The total size in bytes we allow | | | to evaluate when capturing an | | | excpetion (Same as snapshot) | +-----------------------------------+-----------------------------------+ | ex | Max frame count we allow to | | ceptions_stack_trace_frame_count | collect data from when capturing | | | an excpetion (Same as snapshot) | +-----------------------------------+-----------------------------------+ | enable_pii_redaction | Enable PII redaction in the | | | agent's side (may have an effect | | | on the application's performance) | +-----------------------------------+-----------------------------------+ Agent Command line arguments {#_agent_command_line_arguments} \u00b6 Some configurations can be changed with a command line argument. The command line args come after the agent's path and are separated by a comma: `-agentpath:<path-to-agent>/lightrun_agent.so=--lightrun_wait_for_init,--lightrun_init_wait_time_ms=5000` +----------------------+----------------------+-----------------------+ | Parameter Name | Explanation | Type | +======================+======================+=======================+ | hub_retry_delay_ms | amount of time in | int32 | | | milliseconds to | | | | sleep before | | | | retrying failed | | | | requests to backend | | +----------------------+----------------------+-----------------------+ | debugge | amount of time in | int32 | | e_disabled_delay_ms | milliseconds to | | | | sleep before | | | | checking whether the | | | | debugger was enabled | | | | back | | +----------------------+----------------------+-----------------------+ | lightr | additional | string | | un_extra_class_path | directories and | | | | files containing | | | | resolvable binaries | | +----------------------+----------------------+-----------------------+ | lightru | timeout for wait if | int32 | | n_init_wait_time_ms | li | | | | ghtrun_wait_for_init | | | | is set | | +----------------------+----------------------+-----------------------+ | lig | Block application | bool | | htrun_wait_for_init | until first time of | | | | fetching breakpoints | | | | from the server | | +----------------------+----------------------+-----------------------+ | enable_safe_caller | Allows any method | bool | | | without side effects | | | | in expressions | | +----------------------+----------------------+-----------------------+ | ex | Additional methods | string | | tra_blocked_methods | to block for testing | | | | purposes | | +----------------------+----------------------+-----------------------+ | ex | Additional methods | string | | tra_allowed_methods | to allowed for | | | | testing purposes | | +----------------------+----------------------+-----------------------+ | extra_ | Internal names of | string | | whitelisted_classes | additional classes | | | | to allow for testing | | | | purposes | | +----------------------+----------------------+-----------------------+ | expression_max | Maximum number of | int32 | | _classes_load_quota | classes that the | | | | NanoJava interpreter | | | | is allowed to load | | | | while evaluating a | | | | single breakpoint | | | | expression | | +----------------------+----------------------+-----------------------+ | expres | Maximum number of | int32 | | sion_max_interpreter | instructions that | | | _instructions_quota | the NanoJava | | | | interpreter is | | | | allowed to execute | | | | while evaluating a | | | | single breakpoint | | | | expression | | +----------------------+----------------------+-----------------------+ | pretty_printers_max | Maximum number of | int32 | | _classes_load_quota | classes that the | | | | NanoJava interpreter | | | | is allowed to load | | | | while formatting | | | | some well known data | | | | structures | | +----------------------+----------------------+-----------------------+ | pretty_prin | Maximum number of | int32 | | ters_max_interpreter | instructions that | | | _instructions_quota | the NanoJava | | | | interpreter is | | | | allowed to execute | | | | while formatting | | | | some well known data | | | | structures | | +----------------------+----------------------+-----------------------+ | dynamic_log_max | Maximum number of | int32 | | _classes_load_quota | classes that the | | | | NanoJava interpreter | | | | is allowed to load | | | | while evaluating all | | | | expressions in a | | | | single dynamic log | | | | statement | | +----------------------+----------------------+-----------------------+ | dynamic | Maximum number of | int32 | | _log_max_interpreter | instructions that | | | _instructions_quota | the NanoJava | | | | interpreter is | | | | allowed to execute | | | | while evaluating all | | | | expressions in a | | | | single dynamic log | | +----------------------+----------------------+-----------------------+ | safe_caller | Maximum allowed size | int32 | | _max_array_elements | of the array to copy | | | | or allocate in safe | | | | caller (copying or | | | | allocating larger | | | | arrays is considered | | | | to be too expensive | | | | MISSING | | +----------------------+----------------------+-----------------------+ | | Maximum stack depth | int32 | | safe_caller_max_inte | that safe caller | | | rpreter_stack_depth | will allow | | +----------------------+----------------------+-----------------------+ | cdbg | additional text to | string | | _description_suffix | be appended to | | | | debuggee description | | +----------------------+----------------------+-----------------------+ | cdbg_cla | Cache size for class | int32 | | ss_files_cache_size | files used in safe | | | | method caller | | +----------------------+----------------------+-----------------------+ | cdbg_ma | Use this value when | int32 | | x_instructions_high | ignoring quota | | +----------------------+----------------------+-----------------------+ | c | Maximum number of | int32 | | dbg_max_stack_depth | stack frames to | | | | unwind | | +----------------------+----------------------+-----------------------+ Metrics {#_metrics} \u00b6 The agent runs alongside a production application. Hence, it's crucial to monitor and collect important metrics about the overhead of the agent. The agent prints to it's own log file (usually /tmp/lightrun_java_agent.INFO ) statistics every log_stats_time_micros microseconds. Listed below are some reported metrics based on the agents logfile. StatsD {#_statsd} \u00b6 Statsd is a network deamon listens for statistics over UDP or TCP and aggregates the data into different backends (e.g Graphite). There's a short script that performs on-line metric scraping from agent log file (usually /tmp/lightrun_java_agent.INFO ). cd <install-dir>/agent/stats/ ./statsd_reporter.py --host <statsd-hostname> --port <statsd-port> --logfile <agent-log-file.txt>","title":"Agent administration"},{"location":"agentadmin/#tagging-_tagging","text":"Tagging lets us group agents together for common functionality under a meaningful name. E.g. Database Servers, Staging, 18GB Machines etc. We can use any set of tags to define an agent. This would allow binding actions to an agent even before it was launched as well as applying an action to a cross section of servers. We tag an agent by editing the file agent.metadata.json e.g.: { \"registration\" : { \"tags\" : [ { \"name\" : \"ProductionsAgents\" }, { \"name\" : \"JDK1.8\" }, { \"name\" : \"Ubuntu16\" } ] } } We can add/remove entries within the \\\"tags\\\" section. ::: {.note} Changes to this file aren't detected dynamically. An agent restart would be required ::: Once we bind an action to a tag it will be added implicitly to the tagged agents. This can be useful for many cases. E.g. integration tests can execute with a specific tag, that lets us debug an integration test failure by binding an action based on a tag. Tags can also be defined in the command line e.g. java -Dlightrun.registration.tags = myTag -agentpath:/path/to/agent/lightrun_agent.so RestOfTheArgumentsHere","title":"Tagging {#_tagging}"},{"location":"agentadmin/#customization-_customization","text":"","title":"Customization {#_customization}"},{"location":"agentadmin/#dynamic-logger-_dynamic_logger","text":"The inserted logs are printed using java.util.logging logger. You can customize the log prints by adding -Djava.util.logging.config.file=/path/to/app.properties to the command line.","title":"Dynamic Logger {#_dynamic_logger}"},{"location":"agentadmin/#agent-config-_agent_config","text":"There are a few parameters we can tune in order to change the agent configuration. The configuration file is located under <install_dir>/agent/agent.config . +-----------------------------------+-----------------------------------+ | Parameter Name | Explanation | +===================================+===================================+ | max_dynamic_log_rate | Number of log prints per second | | | (on average). | +-----------------------------------+-----------------------------------+ | max_dynamic_log_bytes_rate | Number of bytes per second (on | | | average). | +-----------------------------------+-----------------------------------+ | log_stats_time_micros | How often to log debugger | | | performance stats. | +-----------------------------------+-----------------------------------+ | max_condition_cost | Maximum cost in percentage of CPU | | | consumption of condition | | | evaluation. | +-----------------------------------+-----------------------------------+ | max_log_cpu_cost | Maximum cost of dynamic logging | | | in percentage of CPU consumption | | | (short bursts are allowed). | +-----------------------------------+-----------------------------------+ | max_snapshot_buffer_size | The total size in bytes we allow | | | to evaluate when capturing a | | | snapshot | +-----------------------------------+-----------------------------------+ | max_snapshot_frame_count | Max frame count we allow to | | | collect data from when capturing | | | a snapshot | +-----------------------------------+-----------------------------------+ | breakpoint_expiration_sec | Breakpoint \\ Dynamic log | | | expiration in seconds. | +-----------------------------------+-----------------------------------+ | dynamic_log_quota_recovery_ms | Time to pause dynamic log after | | | it runs out of quota. | +-----------------------------------+-----------------------------------+ | no_check_certificate | Disable certificate pinning when | | | accessing the backend | +-----------------------------------+-----------------------------------+ | ignore_quota | Disable all performance safe | | | guards when evaluating a | | | breakpoint. Not Recommended | +-----------------------------------+-----------------------------------+ | exceptions_monitoring_enabled | Enable the capturing of the | | | application's exceptions | +-----------------------------------+-----------------------------------+ | exceptions_monitoring_stdout | Print all of the captured | | | exceptions to the standard output | +-----------------------------------+-----------------------------------+ | exceptions_report_percentage | Process and report only this | | | percentage of the exceptions | | | thrown by the debuggee (A float | | | between 0 and 1.0). | +-----------------------------------+-----------------------------------+ | exceptions_should_report_caught | Report exceptions that were | | | caught by the application as well | | | as exceptions that remained | | | uncaught | +-----------------------------------+-----------------------------------+ | exceptions_max_buffer_size | The total size in bytes we allow | | | to evaluate when capturing an | | | excpetion (Same as snapshot) | +-----------------------------------+-----------------------------------+ | ex | Max frame count we allow to | | ceptions_stack_trace_frame_count | collect data from when capturing | | | an excpetion (Same as snapshot) | +-----------------------------------+-----------------------------------+ | enable_pii_redaction | Enable PII redaction in the | | | agent's side (may have an effect | | | on the application's performance) | +-----------------------------------+-----------------------------------+","title":"Agent Config {#_agent_config}"},{"location":"agentadmin/#agent-command-line-arguments-_agent_command_line_arguments","text":"Some configurations can be changed with a command line argument. The command line args come after the agent's path and are separated by a comma: `-agentpath:<path-to-agent>/lightrun_agent.so=--lightrun_wait_for_init,--lightrun_init_wait_time_ms=5000` +----------------------+----------------------+-----------------------+ | Parameter Name | Explanation | Type | +======================+======================+=======================+ | hub_retry_delay_ms | amount of time in | int32 | | | milliseconds to | | | | sleep before | | | | retrying failed | | | | requests to backend | | +----------------------+----------------------+-----------------------+ | debugge | amount of time in | int32 | | e_disabled_delay_ms | milliseconds to | | | | sleep before | | | | checking whether the | | | | debugger was enabled | | | | back | | +----------------------+----------------------+-----------------------+ | lightr | additional | string | | un_extra_class_path | directories and | | | | files containing | | | | resolvable binaries | | +----------------------+----------------------+-----------------------+ | lightru | timeout for wait if | int32 | | n_init_wait_time_ms | li | | | | ghtrun_wait_for_init | | | | is set | | +----------------------+----------------------+-----------------------+ | lig | Block application | bool | | htrun_wait_for_init | until first time of | | | | fetching breakpoints | | | | from the server | | +----------------------+----------------------+-----------------------+ | enable_safe_caller | Allows any method | bool | | | without side effects | | | | in expressions | | +----------------------+----------------------+-----------------------+ | ex | Additional methods | string | | tra_blocked_methods | to block for testing | | | | purposes | | +----------------------+----------------------+-----------------------+ | ex | Additional methods | string | | tra_allowed_methods | to allowed for | | | | testing purposes | | +----------------------+----------------------+-----------------------+ | extra_ | Internal names of | string | | whitelisted_classes | additional classes | | | | to allow for testing | | | | purposes | | +----------------------+----------------------+-----------------------+ | expression_max | Maximum number of | int32 | | _classes_load_quota | classes that the | | | | NanoJava interpreter | | | | is allowed to load | | | | while evaluating a | | | | single breakpoint | | | | expression | | +----------------------+----------------------+-----------------------+ | expres | Maximum number of | int32 | | sion_max_interpreter | instructions that | | | _instructions_quota | the NanoJava | | | | interpreter is | | | | allowed to execute | | | | while evaluating a | | | | single breakpoint | | | | expression | | +----------------------+----------------------+-----------------------+ | pretty_printers_max | Maximum number of | int32 | | _classes_load_quota | classes that the | | | | NanoJava interpreter | | | | is allowed to load | | | | while formatting | | | | some well known data | | | | structures | | +----------------------+----------------------+-----------------------+ | pretty_prin | Maximum number of | int32 | | ters_max_interpreter | instructions that | | | _instructions_quota | the NanoJava | | | | interpreter is | | | | allowed to execute | | | | while formatting | | | | some well known data | | | | structures | | +----------------------+----------------------+-----------------------+ | dynamic_log_max | Maximum number of | int32 | | _classes_load_quota | classes that the | | | | NanoJava interpreter | | | | is allowed to load | | | | while evaluating all | | | | expressions in a | | | | single dynamic log | | | | statement | | +----------------------+----------------------+-----------------------+ | dynamic | Maximum number of | int32 | | _log_max_interpreter | instructions that | | | _instructions_quota | the NanoJava | | | | interpreter is | | | | allowed to execute | | | | while evaluating all | | | | expressions in a | | | | single dynamic log | | +----------------------+----------------------+-----------------------+ | safe_caller | Maximum allowed size | int32 | | _max_array_elements | of the array to copy | | | | or allocate in safe | | | | caller (copying or | | | | allocating larger | | | | arrays is considered | | | | to be too expensive | | | | MISSING | | +----------------------+----------------------+-----------------------+ | | Maximum stack depth | int32 | | safe_caller_max_inte | that safe caller | | | rpreter_stack_depth | will allow | | +----------------------+----------------------+-----------------------+ | cdbg | additional text to | string | | _description_suffix | be appended to | | | | debuggee description | | +----------------------+----------------------+-----------------------+ | cdbg_cla | Cache size for class | int32 | | ss_files_cache_size | files used in safe | | | | method caller | | +----------------------+----------------------+-----------------------+ | cdbg_ma | Use this value when | int32 | | x_instructions_high | ignoring quota | | +----------------------+----------------------+-----------------------+ | c | Maximum number of | int32 | | dbg_max_stack_depth | stack frames to | | | | unwind | | +----------------------+----------------------+-----------------------+","title":"Agent Command line arguments {#_agent_command_line_arguments}"},{"location":"agentadmin/#metrics-_metrics","text":"The agent runs alongside a production application. Hence, it's crucial to monitor and collect important metrics about the overhead of the agent. The agent prints to it's own log file (usually /tmp/lightrun_java_agent.INFO ) statistics every log_stats_time_micros microseconds. Listed below are some reported metrics based on the agents logfile.","title":"Metrics {#_metrics}"},{"location":"agentadmin/#statsd-_statsd","text":"Statsd is a network deamon listens for statistics over UDP or TCP and aggregates the data into different backends (e.g Graphite). There's a short script that performs on-line metric scraping from agent log file (usually /tmp/lightrun_java_agent.INFO ). cd <install-dir>/agent/stats/ ./statsd_reporter.py --host <statsd-hostname> --port <statsd-port> --logfile <agent-log-file.txt>","title":"StatsD {#_statsd}"},{"location":"alerts/","text":"Lightrun can send you alerts to inform you on what is going on with the exceptions in your applications. The alerts can be recurring (weekly/daily) or they can be on various events that happened. To configure these alerts go to \\\"Email Alerts\\\" at the menu bar.","title":"Alerting"},{"location":"cli-manage/","text":"The CLI can be used in parallel to the plugin. It's a matter of personal preference. When we submit a command via the plugin/CLI we often provide a line number/file name. If they don't match the bytecode version on the app things will behave inconsistently and fail. Usage {#_usage} \u00b6 lightrunc list-agents \u2009---\u2009List the agents lightrunc list-tags \u2009---\u2009List the tags lightrunc list-agents-by-tag <Tag> \u2009---\u2009List the agents by given tag lightrunc list-actions <AgentId> \u2009---\u2009List the actions for the given agent id lightrunc log <AgentId> <Filename>:<LineNumber> <Format> -expireSec \u2009---\u2009Insert a log to the given agent at the given file/line with the format (text of the log) lightrunc clog <AgentId> <Filename>:<LineNumber> <Format> -condition -expireSec \u2009---\u2009Insert a conditional log to the given agent at the given file/line with the format (text of the log) lightrunc snapshot <AgentId> <Filename>:<LineNumber> -condition \u2009---\u2009Insert a breakpoint to the given agent at the given file/line lightrunc snapshot-data <AgentId> <SnapshotId> \u2009---\u2009Prints the accumulated data for a snapshot lightrunc counter <AgentId> <Filename>:<LineNumber> <CounterName> -condition -expireSec \u2009---\u2009Insert a breakpoint to the given agent at the given file/line lightrunc set-value <AgentId> <FileName>:<LineNumber> -expireSec <VarName1=VarValue> <VarName2=VarValue>\u2026\u200b \u2009---\u2009Set the values of the given variables in a certain line lightrunc rm <AgentId> <LogId> \u2009---\u2009Removes a log from the given agent lightrunc rm-tag <tagName> \u2009---\u2009Removes a tag from the server lightrunc status \u2009---\u2009Prints the current status of the backend lightrunc detach <on|off> \u2009---\u2009Disconnects all agents and disables lightrun instantly (when on) until it's turned off again lightrunc print-logs <AgentId> \u2009---\u2009Print recent logs for the given agent lightrunc enable-logs <AgentId> \u2009---\u2009Logs for this agent id will be available in the print-logs command. Logs are still printed in the server. lightrunc client-logs <AgentId> \u2009---\u2009Logs for this agent id will be available in the print-logs command and hidden in the server! lightrunc disable-logs <AgentId> \u2009---\u2009Stops tracking logs for the given agent ID in the backend/client (this doesn't stop the log) lightrunc server-url <ServerURL> \u2009---\u2009Sets the server URL for the command line lightrunc create-company <Name> <LicenseExpiry dd/MM/yyyy> <LicensedAgents> <AgentsEnabled> \u2009---\u2009Creates a new company with an agent user. lightrunc create-user <Username> <FirstName> <LastName> <Email> <CompanyName> <Role1> <Role2>\u2026\u200b \u2009---\u2009Creates a new user in the given company. lightrunc login <Username> Log in with the given user name (you will be prompted for password). Optionally you can add a password by adding a 3rd argument password followed by your password lightrunc logout \u2009---\u2009Logs out the currently logged in user on this machine lightrunc version \u2009---\u2009Prints the version of lightrunc and the backend server lightrunc listen \u2009---\u2009Listens to agent/log registration events and prints them out lightrunc -v \u2009---\u2009Verbose mode lightrunc user \u2009---\u2009Prints the details on the server for the currently logged in user lightrunc help \u2009---\u2009Print help details There's a lot to digest here but it's mostly intuitive once you start using it. Before We Begin. Before doing anything we must login and set the server URL. This must be done at least once per client machine. ::: {.tip} Login credentials are shared between the CLI and Plugin ::: lightrunc server-url https://192.168.0.10:8080/company/DefaultCompany This will set the URL of the backend to the given URL. We need to replace 192.168.0.10:8080 with the actual server IP and port. We can then use the login command as such: lightrunc login myuser This will produce a password prompt. ::: {.note} For this to work we need to create a new user in the server first via the web UI ::: Examples {#_examples} \u00b6 List Agents and Actions. lightrunc list agents This prints the list of agents and their associated actions. It results in output similar to this: 0 : ID 5c6e9cdef4e833279ee286a1 HOST LAPTOP-GAJ05OS8 PID 18903 UPDATE Mon, 28 Oct 2019 16 :19:03 GMT > ACTION 8c6e9cdef4e833279ee265f FILE PrimeMain.java LINE 20 TXT Hello { cnt } List Actions. lightrunc list actions 0 If we want to see the actions of a specific agent and not all agents we can use list actions. Notice the last argument is the agent id. Whenever an agent ID or log ID is used we can provide the explicit ID e.g. in the case above it would be: lightrunc list actions 5c6e9cdef4e833279ee286a1 However, providing an offset from the listing would also work in this case. So 0 as we did before, meant the first agent printed by list agents . Similarly action 0 would mean the first action within that agent. Next lets look at log insertions...\u200b Insert Log. lightrunc log 0 Main.java:10 \"Array size {arr.length}\" This command inserts a new log to the first agent. The log will print \\\"Array size \\\" followed by the result of the expression arr.length . This will only work with the first agent has a class compiled from Main.java and has a variable called arr defined in line 10. ::: {.tip} Inserted logs have default expiration timeout of 24 hours ::: Lets say that we have more than one agent and we want to apply this to a tag instead of a specific agent. We can do this: Insert Log to Tag. lightrunc log tag:TagName Main.java:10 \"Array size {arr.length}\" All CLI commands can be used with tags instead of agent IDs. Just use the syntax tag:TagName and replace the word TagName with the appropriate tag. For most cases this is pretty trivial the only difference is for commands such as list where we need to do this: List all the tags. lightrunc list tags Every action can have a condition, this is often recommended to avoid too much information/overhead and to narrow the information. Conditional Log. lightrunc clog 5c6e9cdef4e833279ee286a1 Main.java:10 \"i % 10 == 0\" \"Array size {arr.length}\" The log above will be printed when the expression i % 10 == 0 will be evaluated to true . Once we're done with an action we need to clean up. Here's where the rm command comes in handy: Remove Command. lightrunc rm 0 0 This removes the first action from the first agent. ::: {.note} This works for tags and full IDs as well ::: Lightrun comes with a special tool to \\\"pull the plug\\\" and disable Lightrun. If there are issues where we want to rule out Lightruns blame we can use detach to disable all agents: Detaches all Agents. lightrunc detach on Re-enable agents. lightrunc detach off Create company by Admin. lightrunc create-company <Name> <LicenseExpiry dd/MM/yyyy> <LicensedAgents> <AgentsEnabled> \\<LicenseExpiry> Date, license expiration date. After expired, agents can't register. \\<LicensedAgents> Numeric, Max number of allowed agents. \\<AgentsEnabled> Boolean, indicates whether agents are enabled in the company. This will create a new company with an agent user. Create user by Admin or Manager. create-user <Username> <FirstName> <LastName> <Email> <CompanyName> <Role1> <Role2>... \\<Username> and \\<Email> should be unique globally \\<RoleX> should be one of the following: [ROLE_ADMIN, ROLE_MANAGER, ROLE_USER]. Only Admin is authorized to create a user with ROLE_AGENT. This will create a new user in the given company.","title":"CLI Reference"},{"location":"cli-manage/#usage-_usage","text":"lightrunc list-agents \u2009---\u2009List the agents lightrunc list-tags \u2009---\u2009List the tags lightrunc list-agents-by-tag <Tag> \u2009---\u2009List the agents by given tag lightrunc list-actions <AgentId> \u2009---\u2009List the actions for the given agent id lightrunc log <AgentId> <Filename>:<LineNumber> <Format> -expireSec \u2009---\u2009Insert a log to the given agent at the given file/line with the format (text of the log) lightrunc clog <AgentId> <Filename>:<LineNumber> <Format> -condition -expireSec \u2009---\u2009Insert a conditional log to the given agent at the given file/line with the format (text of the log) lightrunc snapshot <AgentId> <Filename>:<LineNumber> -condition \u2009---\u2009Insert a breakpoint to the given agent at the given file/line lightrunc snapshot-data <AgentId> <SnapshotId> \u2009---\u2009Prints the accumulated data for a snapshot lightrunc counter <AgentId> <Filename>:<LineNumber> <CounterName> -condition -expireSec \u2009---\u2009Insert a breakpoint to the given agent at the given file/line lightrunc set-value <AgentId> <FileName>:<LineNumber> -expireSec <VarName1=VarValue> <VarName2=VarValue>\u2026\u200b \u2009---\u2009Set the values of the given variables in a certain line lightrunc rm <AgentId> <LogId> \u2009---\u2009Removes a log from the given agent lightrunc rm-tag <tagName> \u2009---\u2009Removes a tag from the server lightrunc status \u2009---\u2009Prints the current status of the backend lightrunc detach <on|off> \u2009---\u2009Disconnects all agents and disables lightrun instantly (when on) until it's turned off again lightrunc print-logs <AgentId> \u2009---\u2009Print recent logs for the given agent lightrunc enable-logs <AgentId> \u2009---\u2009Logs for this agent id will be available in the print-logs command. Logs are still printed in the server. lightrunc client-logs <AgentId> \u2009---\u2009Logs for this agent id will be available in the print-logs command and hidden in the server! lightrunc disable-logs <AgentId> \u2009---\u2009Stops tracking logs for the given agent ID in the backend/client (this doesn't stop the log) lightrunc server-url <ServerURL> \u2009---\u2009Sets the server URL for the command line lightrunc create-company <Name> <LicenseExpiry dd/MM/yyyy> <LicensedAgents> <AgentsEnabled> \u2009---\u2009Creates a new company with an agent user. lightrunc create-user <Username> <FirstName> <LastName> <Email> <CompanyName> <Role1> <Role2>\u2026\u200b \u2009---\u2009Creates a new user in the given company. lightrunc login <Username> Log in with the given user name (you will be prompted for password). Optionally you can add a password by adding a 3rd argument password followed by your password lightrunc logout \u2009---\u2009Logs out the currently logged in user on this machine lightrunc version \u2009---\u2009Prints the version of lightrunc and the backend server lightrunc listen \u2009---\u2009Listens to agent/log registration events and prints them out lightrunc -v \u2009---\u2009Verbose mode lightrunc user \u2009---\u2009Prints the details on the server for the currently logged in user lightrunc help \u2009---\u2009Print help details There's a lot to digest here but it's mostly intuitive once you start using it. Before We Begin. Before doing anything we must login and set the server URL. This must be done at least once per client machine. ::: {.tip} Login credentials are shared between the CLI and Plugin ::: lightrunc server-url https://192.168.0.10:8080/company/DefaultCompany This will set the URL of the backend to the given URL. We need to replace 192.168.0.10:8080 with the actual server IP and port. We can then use the login command as such: lightrunc login myuser This will produce a password prompt. ::: {.note} For this to work we need to create a new user in the server first via the web UI :::","title":"Usage {#_usage}"},{"location":"cli-manage/#examples-_examples","text":"List Agents and Actions. lightrunc list agents This prints the list of agents and their associated actions. It results in output similar to this: 0 : ID 5c6e9cdef4e833279ee286a1 HOST LAPTOP-GAJ05OS8 PID 18903 UPDATE Mon, 28 Oct 2019 16 :19:03 GMT > ACTION 8c6e9cdef4e833279ee265f FILE PrimeMain.java LINE 20 TXT Hello { cnt } List Actions. lightrunc list actions 0 If we want to see the actions of a specific agent and not all agents we can use list actions. Notice the last argument is the agent id. Whenever an agent ID or log ID is used we can provide the explicit ID e.g. in the case above it would be: lightrunc list actions 5c6e9cdef4e833279ee286a1 However, providing an offset from the listing would also work in this case. So 0 as we did before, meant the first agent printed by list agents . Similarly action 0 would mean the first action within that agent. Next lets look at log insertions...\u200b Insert Log. lightrunc log 0 Main.java:10 \"Array size {arr.length}\" This command inserts a new log to the first agent. The log will print \\\"Array size \\\" followed by the result of the expression arr.length . This will only work with the first agent has a class compiled from Main.java and has a variable called arr defined in line 10. ::: {.tip} Inserted logs have default expiration timeout of 24 hours ::: Lets say that we have more than one agent and we want to apply this to a tag instead of a specific agent. We can do this: Insert Log to Tag. lightrunc log tag:TagName Main.java:10 \"Array size {arr.length}\" All CLI commands can be used with tags instead of agent IDs. Just use the syntax tag:TagName and replace the word TagName with the appropriate tag. For most cases this is pretty trivial the only difference is for commands such as list where we need to do this: List all the tags. lightrunc list tags Every action can have a condition, this is often recommended to avoid too much information/overhead and to narrow the information. Conditional Log. lightrunc clog 5c6e9cdef4e833279ee286a1 Main.java:10 \"i % 10 == 0\" \"Array size {arr.length}\" The log above will be printed when the expression i % 10 == 0 will be evaluated to true . Once we're done with an action we need to clean up. Here's where the rm command comes in handy: Remove Command. lightrunc rm 0 0 This removes the first action from the first agent. ::: {.note} This works for tags and full IDs as well ::: Lightrun comes with a special tool to \\\"pull the plug\\\" and disable Lightrun. If there are issues where we want to rule out Lightruns blame we can use detach to disable all agents: Detaches all Agents. lightrunc detach on Re-enable agents. lightrunc detach off Create company by Admin. lightrunc create-company <Name> <LicenseExpiry dd/MM/yyyy> <LicensedAgents> <AgentsEnabled> \\<LicenseExpiry> Date, license expiration date. After expired, agents can't register. \\<LicensedAgents> Numeric, Max number of allowed agents. \\<AgentsEnabled> Boolean, indicates whether agents are enabled in the company. This will create a new company with an agent user. Create user by Admin or Manager. create-user <Username> <FirstName> <LastName> <Email> <CompanyName> <Role1> <Role2>... \\<Username> and \\<Email> should be unique globally \\<RoleX> should be one of the following: [ROLE_ADMIN, ROLE_MANAGER, ROLE_USER]. Only Admin is authorized to create a user with ROLE_AGENT. This will create a new user in the given company.","title":"Examples {#_examples}"},{"location":"cli/","text":"The CLI can be used in parallel to the plugin. It's a matter of personal preference. When we submit a command via the plugin/CLI we often provide a line number/file name. If they don't match the bytecode version on the app things will behave inconsistently and fail. Usage {#_usage} \u00b6 lightrunc list-agents \u2009---\u2009List the agents lightrunc list-tags \u2009---\u2009List the tags lightrunc list-agents-by-tag <Tag> \u2009---\u2009List the agents by given tag lightrunc list-actions <AgentId> \u2009---\u2009List the actions for the given agent id lightrunc log <AgentId> <Filename>:<LineNumber> <Format> -expireSec \u2009---\u2009Insert a log to the given agent at the given file/line with the format (text of the log) lightrunc clog <AgentId> <Filename>:<LineNumber> <Format> -condition -expireSec \u2009---\u2009Insert a conditional log to the given agent at the given file/line with the format (text of the log) lightrunc snapshot <AgentId> <Filename>:<LineNumber> -condition \u2009---\u2009Insert a breakpoint to the given agent at the given file/line lightrunc snapshot-data <AgentId> <SnapshotId> \u2009---\u2009Prints the accumulated data for a snapshot lightrunc counter <AgentId> <Filename>:<LineNumber> <CounterName> -condition -expireSec \u2009---\u2009Insert a breakpoint to the given agent at the given file/line lightrunc set-value <AgentId> <FileName>:<LineNumber> -expireSec <VarName1=VarValue> <VarName2=VarValue>\u2026\u200b \u2009---\u2009Set the values of the given variables in a certain line lightrunc rm <AgentId> <LogId> \u2009---\u2009Removes a log from the given agent lightrunc rm-tag <tagName> \u2009---\u2009Removes a tag from the server lightrunc status \u2009---\u2009Prints the current status of the backend lightrunc detach <on|off> \u2009---\u2009Disconnects all agents and disables lightrun instantly (when on) until it's turned off again lightrunc print-logs <AgentId> \u2009---\u2009Print recent logs for the given agent lightrunc enable-logs <AgentId> \u2009---\u2009Logs for this agent id will be available in the print-logs command. Logs are still printed in the server. lightrunc client-logs <AgentId> \u2009---\u2009Logs for this agent id will be available in the print-logs command and hidden in the server! lightrunc disable-logs <AgentId> \u2009---\u2009Stops tracking logs for the given agent ID in the backend/client (this doesn't stop the log) lightrunc server-url <ServerURL> \u2009---\u2009Sets the server URL for the command line lightrunc create-company <Name> <LicenseExpiry dd/MM/yyyy> <LicensedAgents> <AgentsEnabled> \u2009---\u2009Creates a new company with an agent user. lightrunc create-user <Username> <FirstName> <LastName> <Email> <CompanyName> <Role1> <Role2>\u2026\u200b \u2009---\u2009Creates a new user in the given company. lightrunc login <Username> Log in with the given user name (you will be prompted for password). Optionally you can add a password by adding a 3rd argument password followed by your password lightrunc logout \u2009---\u2009Logs out the currently logged in user on this machine lightrunc version \u2009---\u2009Prints the version of lightrunc and the backend server lightrunc listen \u2009---\u2009Listens to agent/log registration events and prints them out lightrunc -v \u2009---\u2009Verbose mode lightrunc user \u2009---\u2009Prints the details on the server for the currently logged in user lightrunc help \u2009---\u2009Print help details There's a lot to digest here but it's mostly intuitive once you start using it. Before We Begin. Before doing anything we must login and set the server URL. This must be done at least once per client machine. ::: {.tip} Login credentials are shared between the CLI and Plugin ::: lightrunc server-url https://192.168.0.10:8080/company/DefaultCompany This will set the URL of the backend to the given URL. We need to replace 192.168.0.10:8080 with the actual server IP and port. We can then use the login command as such: lightrunc login myuser This will produce a password prompt. ::: {.note} For this to work we need to create a new user in the server first via the web UI ::: Examples {#_examples} \u00b6 List Agents and Actions. lightrunc list agents This prints the list of agents and their associated actions. It results in output similar to this: 0 : ID 5c6e9cdef4e833279ee286a1 HOST LAPTOP-GAJ05OS8 PID 18903 UPDATE Mon, 28 Oct 2019 16 :19:03 GMT > ACTION 8c6e9cdef4e833279ee265f FILE PrimeMain.java LINE 20 TXT Hello { cnt } List Actions. lightrunc list actions 0 If we want to see the actions of a specific agent and not all agents we can use list actions. Notice the last argument is the agent id. Whenever an agent ID or log ID is used we can provide the explicit ID e.g. in the case above it would be: lightrunc list actions 5c6e9cdef4e833279ee286a1 However, providing an offset from the listing would also work in this case. So 0 as we did before, meant the first agent printed by list agents . Similarly action 0 would mean the first action within that agent. Next lets look at log insertions...\u200b Insert Log. lightrunc log 0 Main.java:10 \"Array size {arr.length}\" This command inserts a new log to the first agent. The log will print \\\"Array size \\\" followed by the result of the expression arr.length . This will only work with the first agent has a class compiled from Main.java and has a variable called arr defined in line 10. ::: {.tip} Inserted logs have default expiration timeout of 24 hours ::: Lets say that we have more than one agent and we want to apply this to a tag instead of a specific agent. We can do this: Insert Log to Tag. lightrunc log tag:TagName Main.java:10 \"Array size {arr.length}\" All CLI commands can be used with tags instead of agent IDs. Just use the syntax tag:TagName and replace the word TagName with the appropriate tag. For most cases this is pretty trivial the only difference is for commands such as list where we need to do this: List all the tags. lightrunc list tags Every action can have a condition, this is often recommended to avoid too much information/overhead and to narrow the information. Conditional Log. lightrunc clog 5c6e9cdef4e833279ee286a1 Main.java:10 \"i % 10 == 0\" \"Array size {arr.length}\" The log above will be printed when the expression i % 10 == 0 will be evaluated to true . Once we're done with an action we need to clean up. Here's where the rm command comes in handy: Remove Command. lightrunc rm 0 0 This removes the first action from the first agent. ::: {.note} This works for tags and full IDs as well ::: Lightrun comes with a special tool to \\\"pull the plug\\\" and disable Lightrun. If there are issues where we want to rule out Lightruns blame we can use detach to disable all agents: Detaches all Agents. lightrunc detach on Re-enable agents. lightrunc detach off Create company by Admin. lightrunc create-company <Name> <LicenseExpiry dd/MM/yyyy> <LicensedAgents> <AgentsEnabled> \\<LicenseExpiry> Date, license expiration date. After expired, agents can't register. \\<LicensedAgents> Numeric, Max number of allowed agents. \\<AgentsEnabled> Boolean, indicates whether agents are enabled in the company. This will create a new company with an agent user. Create user by Admin or Manager. create-user <Username> <FirstName> <LastName> <Email> <CompanyName> <Role1> <Role2>... \\<Username> and \\<Email> should be unique globally \\<RoleX> should be one of the following: [ROLE_ADMIN, ROLE_MANAGER, ROLE_USER]. Only Admin is authorized to create a user with ROLE_AGENT. This will create a new user in the given company.","title":"CLI Reference"},{"location":"cli/#usage-_usage","text":"lightrunc list-agents \u2009---\u2009List the agents lightrunc list-tags \u2009---\u2009List the tags lightrunc list-agents-by-tag <Tag> \u2009---\u2009List the agents by given tag lightrunc list-actions <AgentId> \u2009---\u2009List the actions for the given agent id lightrunc log <AgentId> <Filename>:<LineNumber> <Format> -expireSec \u2009---\u2009Insert a log to the given agent at the given file/line with the format (text of the log) lightrunc clog <AgentId> <Filename>:<LineNumber> <Format> -condition -expireSec \u2009---\u2009Insert a conditional log to the given agent at the given file/line with the format (text of the log) lightrunc snapshot <AgentId> <Filename>:<LineNumber> -condition \u2009---\u2009Insert a breakpoint to the given agent at the given file/line lightrunc snapshot-data <AgentId> <SnapshotId> \u2009---\u2009Prints the accumulated data for a snapshot lightrunc counter <AgentId> <Filename>:<LineNumber> <CounterName> -condition -expireSec \u2009---\u2009Insert a breakpoint to the given agent at the given file/line lightrunc set-value <AgentId> <FileName>:<LineNumber> -expireSec <VarName1=VarValue> <VarName2=VarValue>\u2026\u200b \u2009---\u2009Set the values of the given variables in a certain line lightrunc rm <AgentId> <LogId> \u2009---\u2009Removes a log from the given agent lightrunc rm-tag <tagName> \u2009---\u2009Removes a tag from the server lightrunc status \u2009---\u2009Prints the current status of the backend lightrunc detach <on|off> \u2009---\u2009Disconnects all agents and disables lightrun instantly (when on) until it's turned off again lightrunc print-logs <AgentId> \u2009---\u2009Print recent logs for the given agent lightrunc enable-logs <AgentId> \u2009---\u2009Logs for this agent id will be available in the print-logs command. Logs are still printed in the server. lightrunc client-logs <AgentId> \u2009---\u2009Logs for this agent id will be available in the print-logs command and hidden in the server! lightrunc disable-logs <AgentId> \u2009---\u2009Stops tracking logs for the given agent ID in the backend/client (this doesn't stop the log) lightrunc server-url <ServerURL> \u2009---\u2009Sets the server URL for the command line lightrunc create-company <Name> <LicenseExpiry dd/MM/yyyy> <LicensedAgents> <AgentsEnabled> \u2009---\u2009Creates a new company with an agent user. lightrunc create-user <Username> <FirstName> <LastName> <Email> <CompanyName> <Role1> <Role2>\u2026\u200b \u2009---\u2009Creates a new user in the given company. lightrunc login <Username> Log in with the given user name (you will be prompted for password). Optionally you can add a password by adding a 3rd argument password followed by your password lightrunc logout \u2009---\u2009Logs out the currently logged in user on this machine lightrunc version \u2009---\u2009Prints the version of lightrunc and the backend server lightrunc listen \u2009---\u2009Listens to agent/log registration events and prints them out lightrunc -v \u2009---\u2009Verbose mode lightrunc user \u2009---\u2009Prints the details on the server for the currently logged in user lightrunc help \u2009---\u2009Print help details There's a lot to digest here but it's mostly intuitive once you start using it. Before We Begin. Before doing anything we must login and set the server URL. This must be done at least once per client machine. ::: {.tip} Login credentials are shared between the CLI and Plugin ::: lightrunc server-url https://192.168.0.10:8080/company/DefaultCompany This will set the URL of the backend to the given URL. We need to replace 192.168.0.10:8080 with the actual server IP and port. We can then use the login command as such: lightrunc login myuser This will produce a password prompt. ::: {.note} For this to work we need to create a new user in the server first via the web UI :::","title":"Usage {#_usage}"},{"location":"cli/#examples-_examples","text":"List Agents and Actions. lightrunc list agents This prints the list of agents and their associated actions. It results in output similar to this: 0 : ID 5c6e9cdef4e833279ee286a1 HOST LAPTOP-GAJ05OS8 PID 18903 UPDATE Mon, 28 Oct 2019 16 :19:03 GMT > ACTION 8c6e9cdef4e833279ee265f FILE PrimeMain.java LINE 20 TXT Hello { cnt } List Actions. lightrunc list actions 0 If we want to see the actions of a specific agent and not all agents we can use list actions. Notice the last argument is the agent id. Whenever an agent ID or log ID is used we can provide the explicit ID e.g. in the case above it would be: lightrunc list actions 5c6e9cdef4e833279ee286a1 However, providing an offset from the listing would also work in this case. So 0 as we did before, meant the first agent printed by list agents . Similarly action 0 would mean the first action within that agent. Next lets look at log insertions...\u200b Insert Log. lightrunc log 0 Main.java:10 \"Array size {arr.length}\" This command inserts a new log to the first agent. The log will print \\\"Array size \\\" followed by the result of the expression arr.length . This will only work with the first agent has a class compiled from Main.java and has a variable called arr defined in line 10. ::: {.tip} Inserted logs have default expiration timeout of 24 hours ::: Lets say that we have more than one agent and we want to apply this to a tag instead of a specific agent. We can do this: Insert Log to Tag. lightrunc log tag:TagName Main.java:10 \"Array size {arr.length}\" All CLI commands can be used with tags instead of agent IDs. Just use the syntax tag:TagName and replace the word TagName with the appropriate tag. For most cases this is pretty trivial the only difference is for commands such as list where we need to do this: List all the tags. lightrunc list tags Every action can have a condition, this is often recommended to avoid too much information/overhead and to narrow the information. Conditional Log. lightrunc clog 5c6e9cdef4e833279ee286a1 Main.java:10 \"i % 10 == 0\" \"Array size {arr.length}\" The log above will be printed when the expression i % 10 == 0 will be evaluated to true . Once we're done with an action we need to clean up. Here's where the rm command comes in handy: Remove Command. lightrunc rm 0 0 This removes the first action from the first agent. ::: {.note} This works for tags and full IDs as well ::: Lightrun comes with a special tool to \\\"pull the plug\\\" and disable Lightrun. If there are issues where we want to rule out Lightruns blame we can use detach to disable all agents: Detaches all Agents. lightrunc detach on Re-enable agents. lightrunc detach off Create company by Admin. lightrunc create-company <Name> <LicenseExpiry dd/MM/yyyy> <LicensedAgents> <AgentsEnabled> \\<LicenseExpiry> Date, license expiration date. After expired, agents can't register. \\<LicensedAgents> Numeric, Max number of allowed agents. \\<AgentsEnabled> Boolean, indicates whether agents are enabled in the company. This will create a new company with an agent user. Create user by Admin or Manager. create-user <Username> <FirstName> <LastName> <Email> <CompanyName> <Role1> <Role2>... \\<Username> and \\<Email> should be unique globally \\<RoleX> should be one of the following: [ROLE_ADMIN, ROLE_MANAGER, ROLE_USER]. Only Admin is authorized to create a user with ROLE_AGENT. This will create a new user in the given company.","title":"Examples {#_examples}"},{"location":"demo/","text":"The demo directory has some sample java examples. We will use them in order to demonstrate the debugging capabilities. All the demos below assume the Lightrun backend is already installed and running. Prime Numbers Counter {#_prime_numbers_counter} \u00b6 This demo is located under the demo/prime-app directory. The file PrimeMain.java has a short code that counts all the prime numbers less than 1B. Let's see how we can add additional log prints to this application: 1. Run the application {#_1_run_the_application} \u00b6 Open a new shell, and then: cd demo/prime-app javac PrimeMain.java java -agentpath:<install_dir>/lightrun_agent.so PrimeMain Now the application is running. We can validate that the agent registered correctly by running lightrunc list agents . We should see something like: 0 : ID 5 c84e29871f7a700010ca737UPDATE Sun , 10 Mar 2019 10 : 10 : 32 GMT 2. Use Lightruns CLI {#_2_use_lightruns_cli} \u00b6 Open a new shell. Let's try to print the current primes counter. lightrunc log 0 PrimeMain.java:20 \"Current Count is {cnt}\" When we look at the application window we will see something like: Feb 28, 2019 2:11:29 AM PrimeMain main INFO: LOGPOINT: current prime is 1467954 Feb 28, 2019 2:11:29 AM PrimeMain main INFO: LOGPOINT: current prime is 1467955 Feb 28, 2019 2:11:29 AM PrimeMain main INFO: LOGPOINT: current prime is 1467956 Feb 28, 2019 2:11:29 AM PrimeMain main INFO: LOGPOINT: Logpoint is paused due to high call rate until log quota is restored Here we can see than our agent does not allow too many log prints to be fired - this is intended, we cap the CPU overhead of the agent. Not all the variables are available for exploration. Some of the debug information might be missing due to compiler's optimizations. In order to enhance the debug information, we should add the -g flag to the compilation command (more information is available in README file). For example in this demo application when we try to add the following log: lightrunc log 0 PrimeMain.java:20 \"Current Prime is {i}\" We see the following log printout in the application: INFO : LOGPOINT : Current Prime is Identifier i not found Feb 28 , 2019 2 : 05 : 07 AM PrimeMain isPrime Compiling with -g flag javac -g PrimeMain.java will enable watching i variable value. Web App Demo {#_web_app_demo} \u00b6 This demo is located under demo/web-app directory. Here we will show how to debug a live production web server application using dynamic logs. Build and Run the Web sSrver {#_build_and_run_the_web_ssrver} \u00b6 First, let's take a look on the application. cd demo/web-app mvn package java -jar target/webapp_demo-0.0.1-SNAPSHOT.jar Now the webserver is running on http://localhost:8080 . This webserver is a simple fibonacci series calculator. When we enter http://localhost:8080/<number>/ we see the <number> fibonacci element. For example, http://localhost:8080/33 will print 5702887. Debug the webserver {#_debug_the_webserver} \u00b6 1. Run the application {#_1_run_the_application_2} \u00b6 cd demo/web-app mvn package java -agentpath:<install_dir>/lightrun_agent.so \\ -jar target/webapp_demo-0.0.1-SNAPSHOT.jar Now the webserver is running on http://localhost:8080 . 2. Use Lightruns CLI for log insertion {#_2_use_lightruns_cli_for_log_insertion} \u00b6 Looks like our simple app has an integer overflow: curl http://localhost:8080/50 # will print -1109825406o We can use Lightruns CLI for inserting logs, and see the trace of such a request. lightrunc log 0 main/java/Example.java:20 \"{n3} = {n1} + {n2}\" We will see an output that looks like: INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 1 = 0 + 1 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 2 = 1 + 1 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 3 = 1 + 2 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 5 = 2 + 3 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 8 = 3 + 5 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 13 = 5 + 8 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 21 = 8 + 13 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 34 = 13 + 21 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 55 = 21 + 34 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 89 = 34 + 55 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 144 = 55 + 89 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 233 = 89 + 144 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 377 = 144 + 233 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 610 = 233 + 377 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 987 = 377 + 610 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 1597 = 610 + 987 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 2584 = 987 + 1597 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 4181 = 1597 + 2584 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 6765 = 2584 + 4181 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 10946 = 4181 + 6765 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 17711 = 6765 + 10946 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 28657 = 10946 + 17711 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 46368 = 17711 + 28657 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 75025 = 28657 + 46368 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 121393 = 46368 + 75025 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 196418 = 75025 + 121393 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 317811 = 121393 + 196418 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 514229 = 196418 + 317811 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 832040 = 317811 + 514229 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 1346269 = 514229 + 832040 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 2178309 = 832040 + 1346269 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 3524578 = 1346269 + 2178309 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 5702887 = 2178309 + 3524578 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 9227465 = 3524578 + 5702887 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 14930352 = 5702887 + 9227465 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 24157817 = 9227465 + 14930352 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 39088169 = 14930352 + 24157817 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 63245986 = 24157817 + 39088169 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 102334155 = 39088169 + 63245986 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 165580141 = 63245986 + 102334155 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 267914296 = 102334155 + 165580141 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 433494437 = 165580141 + 267914296 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 701408733 = 267914296 + 433494437 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 1134903170 = 433494437 + 701408733 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 1836311903 = 701408733 + 1134903170 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: -1323752223 = 1134903170 + 1836311903 Now we can see clearly the integer overflow. Dockerized Application {#_dockerized_application} \u00b6 TODO Scala Game Of Life {#_scala_game_of_life} \u00b6 Our agent can be used also for inserting logs into scala application. The files for this demo are located under demo/scala-game-of-life . Here we will find the famous Game Of Life simulation. Build and Run the Game {#_build_and_run_the_game} \u00b6 export TERM = xterm-color cd demo/scala-game-of-life sbt package sbt run This will print to the console every few msecond a new \\'Game Of Life\\' State. Debug the Game {#_debug_the_game} \u00b6 1. Run the application {#_1_run_the_application_3} \u00b6 cd demo/scala-game-of-life sbt package java -agentpath:<install_dir>/lightrun_agent.so \\ -cp /home/osboxes/.sbt/boot/scala-2.12.7/lib/scala-library.jar:target/scala-2.12/game-of-life-scala_2.12-0.1.0.jar \\ de.l7r7.lab.conway.GameOfLife Simulation is running. 2. Use Lightruns CLI for log insertion {#_2_use_lightruns_cli_for_log_insertion_2} \u00b6 lightrunc log 0 de/l7r7/lab/conway/GameOfLife.scala:85 \"Board Type {board.getClass().toString()}\" This will insert a log print after every game simulation. ::: {.note} Expressions must be written using the Java language syntax, like in the example above. ::: Groovy Prime Main {#_groovy_prime_main} \u00b6 Our agent can be used also for inserting logs into groovy application. The files for this demo are located under demo/groovy-app . The file GroovyPrimeMain.groovy has a short code that counts all the prime numbers less than 1B. 1. Run the application {#_1_run_the_application_4} \u00b6 Open a new shell, and then: cd demo/groovy-app groovyc GroovyPrimeMain.groovy java -cp <path_to_groovy_jar.jar>:. -agentpath:<install_dir>/lightrun_agent.so GroovyPrimeMain The application is running. 2. Use Lightruns CLI for log insertion {#_2_use_lightruns_cli_for_log_insertion_3} \u00b6 lightrunc log 0 GroovyPrimeMain.groovy:22 \"{num} is prime\" We will see an output that looks like: Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: 110389847 is prime Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: 110389871 is prime Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: 110389879 is prime Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: 110389913 is prime Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: 110389933 is prime Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: 110389963 is prime Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: Logpoint is paused due to high call rate until log quota is restored ::: {.note} Expressions must be written using the Java language syntax, like in the example above. :::","title":"Quick start tutorial"},{"location":"demo/#prime-numbers-counter-_prime_numbers_counter","text":"This demo is located under the demo/prime-app directory. The file PrimeMain.java has a short code that counts all the prime numbers less than 1B. Let's see how we can add additional log prints to this application:","title":"Prime Numbers Counter {#_prime_numbers_counter}"},{"location":"demo/#1-run-the-application-_1_run_the_application","text":"Open a new shell, and then: cd demo/prime-app javac PrimeMain.java java -agentpath:<install_dir>/lightrun_agent.so PrimeMain Now the application is running. We can validate that the agent registered correctly by running lightrunc list agents . We should see something like: 0 : ID 5 c84e29871f7a700010ca737UPDATE Sun , 10 Mar 2019 10 : 10 : 32 GMT","title":"1. Run the application {#_1_run_the_application}"},{"location":"demo/#2-use-lightruns-cli-_2_use_lightruns_cli","text":"Open a new shell. Let's try to print the current primes counter. lightrunc log 0 PrimeMain.java:20 \"Current Count is {cnt}\" When we look at the application window we will see something like: Feb 28, 2019 2:11:29 AM PrimeMain main INFO: LOGPOINT: current prime is 1467954 Feb 28, 2019 2:11:29 AM PrimeMain main INFO: LOGPOINT: current prime is 1467955 Feb 28, 2019 2:11:29 AM PrimeMain main INFO: LOGPOINT: current prime is 1467956 Feb 28, 2019 2:11:29 AM PrimeMain main INFO: LOGPOINT: Logpoint is paused due to high call rate until log quota is restored Here we can see than our agent does not allow too many log prints to be fired - this is intended, we cap the CPU overhead of the agent. Not all the variables are available for exploration. Some of the debug information might be missing due to compiler's optimizations. In order to enhance the debug information, we should add the -g flag to the compilation command (more information is available in README file). For example in this demo application when we try to add the following log: lightrunc log 0 PrimeMain.java:20 \"Current Prime is {i}\" We see the following log printout in the application: INFO : LOGPOINT : Current Prime is Identifier i not found Feb 28 , 2019 2 : 05 : 07 AM PrimeMain isPrime Compiling with -g flag javac -g PrimeMain.java will enable watching i variable value.","title":"2. Use Lightruns CLI {#_2_use_lightruns_cli}"},{"location":"demo/#web-app-demo-_web_app_demo","text":"This demo is located under demo/web-app directory. Here we will show how to debug a live production web server application using dynamic logs.","title":"Web App Demo {#_web_app_demo}"},{"location":"demo/#build-and-run-the-web-ssrver-_build_and_run_the_web_ssrver","text":"First, let's take a look on the application. cd demo/web-app mvn package java -jar target/webapp_demo-0.0.1-SNAPSHOT.jar Now the webserver is running on http://localhost:8080 . This webserver is a simple fibonacci series calculator. When we enter http://localhost:8080/<number>/ we see the <number> fibonacci element. For example, http://localhost:8080/33 will print 5702887.","title":"Build and Run the Web sSrver {#_build_and_run_the_web_ssrver}"},{"location":"demo/#debug-the-webserver-_debug_the_webserver","text":"","title":"Debug the webserver {#_debug_the_webserver}"},{"location":"demo/#1-run-the-application-_1_run_the_application_2","text":"cd demo/web-app mvn package java -agentpath:<install_dir>/lightrun_agent.so \\ -jar target/webapp_demo-0.0.1-SNAPSHOT.jar Now the webserver is running on http://localhost:8080 .","title":"1. Run the application {#_1_run_the_application_2}"},{"location":"demo/#2-use-lightruns-cli-for-log-insertion-_2_use_lightruns_cli_for_log_insertion","text":"Looks like our simple app has an integer overflow: curl http://localhost:8080/50 # will print -1109825406o We can use Lightruns CLI for inserting logs, and see the trace of such a request. lightrunc log 0 main/java/Example.java:20 \"{n3} = {n1} + {n2}\" We will see an output that looks like: INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 1 = 0 + 1 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 2 = 1 + 1 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 3 = 1 + 2 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 5 = 2 + 3 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 8 = 3 + 5 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 13 = 5 + 8 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 21 = 8 + 13 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 34 = 13 + 21 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 55 = 21 + 34 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 89 = 34 + 55 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 144 = 55 + 89 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 233 = 89 + 144 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 377 = 144 + 233 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 610 = 233 + 377 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 987 = 377 + 610 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 1597 = 610 + 987 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 2584 = 987 + 1597 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 4181 = 1597 + 2584 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 6765 = 2584 + 4181 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 10946 = 4181 + 6765 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 17711 = 6765 + 10946 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 28657 = 10946 + 17711 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 46368 = 17711 + 28657 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 75025 = 28657 + 46368 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 121393 = 46368 + 75025 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 196418 = 75025 + 121393 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 317811 = 121393 + 196418 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 514229 = 196418 + 317811 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 832040 = 317811 + 514229 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 1346269 = 514229 + 832040 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 2178309 = 832040 + 1346269 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 3524578 = 1346269 + 2178309 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 5702887 = 2178309 + 3524578 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 9227465 = 3524578 + 5702887 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 14930352 = 5702887 + 9227465 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 24157817 = 9227465 + 14930352 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 39088169 = 14930352 + 24157817 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 63245986 = 24157817 + 39088169 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 102334155 = 39088169 + 63245986 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 165580141 = 63245986 + 102334155 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 267914296 = 102334155 + 165580141 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 433494437 = 165580141 + 267914296 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 701408733 = 267914296 + 433494437 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 1134903170 = 433494437 + 701408733 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: 1836311903 = 701408733 + 1134903170 INFO 14911 --- [nio-8080-exec-1] com.google.DynamicLog : LOGPOINT: -1323752223 = 1134903170 + 1836311903 Now we can see clearly the integer overflow.","title":"2. Use Lightruns CLI for log insertion {#_2_use_lightruns_cli_for_log_insertion}"},{"location":"demo/#dockerized-application-_dockerized_application","text":"TODO","title":"Dockerized Application {#_dockerized_application}"},{"location":"demo/#scala-game-of-life-_scala_game_of_life","text":"Our agent can be used also for inserting logs into scala application. The files for this demo are located under demo/scala-game-of-life . Here we will find the famous Game Of Life simulation.","title":"Scala Game Of Life {#_scala_game_of_life}"},{"location":"demo/#build-and-run-the-game-_build_and_run_the_game","text":"export TERM = xterm-color cd demo/scala-game-of-life sbt package sbt run This will print to the console every few msecond a new \\'Game Of Life\\' State.","title":"Build and Run the Game {#_build_and_run_the_game}"},{"location":"demo/#debug-the-game-_debug_the_game","text":"","title":"Debug the Game {#_debug_the_game}"},{"location":"demo/#1-run-the-application-_1_run_the_application_3","text":"cd demo/scala-game-of-life sbt package java -agentpath:<install_dir>/lightrun_agent.so \\ -cp /home/osboxes/.sbt/boot/scala-2.12.7/lib/scala-library.jar:target/scala-2.12/game-of-life-scala_2.12-0.1.0.jar \\ de.l7r7.lab.conway.GameOfLife Simulation is running.","title":"1. Run the application {#_1_run_the_application_3}"},{"location":"demo/#2-use-lightruns-cli-for-log-insertion-_2_use_lightruns_cli_for_log_insertion_2","text":"lightrunc log 0 de/l7r7/lab/conway/GameOfLife.scala:85 \"Board Type {board.getClass().toString()}\" This will insert a log print after every game simulation. ::: {.note} Expressions must be written using the Java language syntax, like in the example above. :::","title":"2. Use Lightruns CLI for log insertion {#_2_use_lightruns_cli_for_log_insertion_2}"},{"location":"demo/#groovy-prime-main-_groovy_prime_main","text":"Our agent can be used also for inserting logs into groovy application. The files for this demo are located under demo/groovy-app . The file GroovyPrimeMain.groovy has a short code that counts all the prime numbers less than 1B.","title":"Groovy Prime Main {#_groovy_prime_main}"},{"location":"demo/#1-run-the-application-_1_run_the_application_4","text":"Open a new shell, and then: cd demo/groovy-app groovyc GroovyPrimeMain.groovy java -cp <path_to_groovy_jar.jar>:. -agentpath:<install_dir>/lightrun_agent.so GroovyPrimeMain The application is running.","title":"1. Run the application {#_1_run_the_application_4}"},{"location":"demo/#2-use-lightruns-cli-for-log-insertion-_2_use_lightruns_cli_for_log_insertion_3","text":"lightrunc log 0 GroovyPrimeMain.groovy:22 \"{num} is prime\" We will see an output that looks like: Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: 110389847 is prime Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: 110389871 is prime Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: 110389879 is prime Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: 110389913 is prime Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: 110389933 is prime Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: 110389963 is prime Feb 23, 2020 3:25:39 PM GroovyPrimeMain isPrime INFO: LOGPOINT: Logpoint is paused due to high call rate until log quota is restored ::: {.note} Expressions must be written using the Java language syntax, like in the example above. :::","title":"2. Use Lightruns CLI for log insertion {#_2_use_lightruns_cli_for_log_insertion_3}"},{"location":"install-client/","text":"In order to use the plugin from your local environment, ensure the admin for your Lightrun account has deployed the Lightrun agent from the relevant application servers. Note: Lightrun currently supports a plugin for IntelliJ, and is working on more. Install the plugin \u00b6 To install the plugin, log in to your Lightrun account from your local environment. The Lightrun installation page loads. Scroll down to the Install the Plugin section. Click Download plugin and store the file in a memorable location. Navigate to your IntelliJ instance. Open the IntelliJ preferences: Select the plugins section: Click the settings cog from the top right and select Install Plugin from Disk : Select the zip file for the plugin from the folder where you stored it when you downloaded. Maximize debugging information \u00b6 Maven and Gradle compile Java class files without specific instructions but exclude certain debugging details in order to reduce the binary size. To ensure these details are included, add a flag to the compiler. This flag has no impact on compiler optimization or performance, only enhancing the bytecode with additional debug information. Maven \u00b6 For Maven, add the following lines to the pom.xml file: <compilerArgs> <arg> -g:source,lines </arg> </compilerArgs> Gradle \u00b6 In the Gradle build file, ensure that the following properties are specified: compileJava . options . debugOptions . debugLevel = \"source,lines,vars\" compileTestJava . options . debugOptions . debugLevel = \"source,lines,vars\"","title":"Install the plugin"},{"location":"install-client/#install-the-plugin","text":"To install the plugin, log in to your Lightrun account from your local environment. The Lightrun installation page loads. Scroll down to the Install the Plugin section. Click Download plugin and store the file in a memorable location. Navigate to your IntelliJ instance. Open the IntelliJ preferences: Select the plugins section: Click the settings cog from the top right and select Install Plugin from Disk : Select the zip file for the plugin from the folder where you stored it when you downloaded.","title":"Install the plugin"},{"location":"install-client/#maximize-debugging-information","text":"Maven and Gradle compile Java class files without specific instructions but exclude certain debugging details in order to reduce the binary size. To ensure these details are included, add a flag to the compiler. This flag has no impact on compiler optimization or performance, only enhancing the bytecode with additional debug information.","title":"Maximize debugging information"},{"location":"install-client/#maven","text":"For Maven, add the following lines to the pom.xml file: <compilerArgs> <arg> -g:source,lines </arg> </compilerArgs>","title":"Maven"},{"location":"install-client/#gradle","text":"In the Gradle build file, ensure that the following properties are specified: compileJava . options . debugOptions . debugLevel = \"source,lines,vars\" compileTestJava . options . debugOptions . debugLevel = \"source,lines,vars\"","title":"Gradle"},{"location":"install/","text":"When you're ready to get rolling, Lightrun sets up the backend server for you and issues an admin account. Thereafter, you can: - Spin the server up and down - Log in to Lightrun - Deploy the application server-side agent Spin the server up and down \u00b6 You can run the backend server on any host using a docker-compose or other container orchestration tool such as Kubernetes, Docker Swarm or Rancher. By default, the backend is configured to run over port 8080. If this port is unavailable, change the port number from the docker-compose file. Copy the two yml files that Lightrun provided at installation into an empty directory and execute the following: cd { docker-compose-directory } docker-compose up -d Log in to Lightrun \u00b6 The backend installed by Lightrun defaults to port 8080 and requires HTTPS. Log in to your Lightrun instance with your admin credentials at https://192.168.1.108:8080/ . Note: Be sure to change the port number if you changed the configuration from your docker-compose file. Note: SSL certificates can be applied to domains only. Therefore, the page loads with an HTTPS warning. 2. Add an exception for this URL in order to bypass the certificate warning that loads. The landing page loads with customized installation instructions for the agent, plugin and CLI. Deploy the agent \u00b6 Once you've logged in to the backend server, the agent can be downloaded and deployed on your application servers. Copy the following code from the welcome page which loads with the customized server IP and port values when you log in. wget --no-check-certificate https://server-ip:8080/content/files/agent.zip & host = server-ip & port = 8080 -O agent.zip mkdir agent unzip agent.zip -d agent Tip: Check out the content of the file agent/agent.config . It includes many options, including the backend server URL. Attach the agent \u00b6 Once you've deployed the agent to your application servers, you should add it to your application as follows: Note: Lightrun currently supports Java applications. From the application server, navigate to the folder where your application resides. Copy the following code: java -agentpath:/path/to/agent/lightrun_agent.so RestOfTheArgumentsHere Replace the agentpath value with the path to the Lightrun agent where you downloaded it and replace RestOfTheArgumentsHere with the name of your application and then run the command. OR Add the JAVA_OPTS environment variable to the server so that all Java processes launched on that server have an agent attached. Copy the following command from the server and replace the agentpath value with the path to the Lightrun agent where you downloaded it: export JAVA_OPTS = -agentpath:/path/to/agent/lightrun_agent.so Once an agent is up and running, you and your team can install the IntelliJ plugin.","title":"Installation"},{"location":"install/#spin-the-server-up-and-down","text":"You can run the backend server on any host using a docker-compose or other container orchestration tool such as Kubernetes, Docker Swarm or Rancher. By default, the backend is configured to run over port 8080. If this port is unavailable, change the port number from the docker-compose file. Copy the two yml files that Lightrun provided at installation into an empty directory and execute the following: cd { docker-compose-directory } docker-compose up -d","title":"Spin the server up and down"},{"location":"install/#log-in-to-lightrun","text":"The backend installed by Lightrun defaults to port 8080 and requires HTTPS. Log in to your Lightrun instance with your admin credentials at https://192.168.1.108:8080/ . Note: Be sure to change the port number if you changed the configuration from your docker-compose file. Note: SSL certificates can be applied to domains only. Therefore, the page loads with an HTTPS warning. 2. Add an exception for this URL in order to bypass the certificate warning that loads. The landing page loads with customized installation instructions for the agent, plugin and CLI.","title":"Log in to Lightrun"},{"location":"install/#deploy-the-agent","text":"Once you've logged in to the backend server, the agent can be downloaded and deployed on your application servers. Copy the following code from the welcome page which loads with the customized server IP and port values when you log in. wget --no-check-certificate https://server-ip:8080/content/files/agent.zip & host = server-ip & port = 8080 -O agent.zip mkdir agent unzip agent.zip -d agent Tip: Check out the content of the file agent/agent.config . It includes many options, including the backend server URL.","title":"Deploy the agent"},{"location":"install/#attach-the-agent","text":"Once you've deployed the agent to your application servers, you should add it to your application as follows: Note: Lightrun currently supports Java applications. From the application server, navigate to the folder where your application resides. Copy the following code: java -agentpath:/path/to/agent/lightrun_agent.so RestOfTheArgumentsHere Replace the agentpath value with the path to the Lightrun agent where you downloaded it and replace RestOfTheArgumentsHere with the name of your application and then run the command. OR Add the JAVA_OPTS environment variable to the server so that all Java processes launched on that server have an agent attached. Copy the following command from the server and replace the agentpath value with the path to the Lightrun agent where you downloaded it: export JAVA_OPTS = -agentpath:/path/to/agent/lightrun_agent.so Once an agent is up and running, you and your team can install the IntelliJ plugin.","title":"Attach the agent"},{"location":"integration/","text":"Agent Integrations {#integrations} \u00b6 Every application server has its own way of customizing jvm arguments. Tomcat {#_tomcat} \u00b6 In order to configure Tomcat to use Lightruns agent we need to add the path to the app war file as an additional parameter to the JAVA_OPTS: -agentpath:<install_dir>/agent/lightrun_agent.so = --lightrun_extra_class_path = <tomcat-path>/webapps/<app-name.war> Please restart the server: ./catalina.sh stop ./catalina.sh start Note: This will make the Agent to run every time the webserver restarts. Tomcat autodeploy will not start a new agent. Therefore, after an autodeploy new insertions will not affect the application. GlassFish {#_glassfish} \u00b6 In order to configure GlassFish to use Lightruns agent we need to add the following to the runtime jvm options: -agentpath:<install_dir>/agent/lightrun_agent.so = --lightrun_extra_class_path = <glassfish-domain-path>/applications/<app-name>/WEB-INF/classes/ There are several methods to add this jvm option: Through the Admin panel (usually http://localhost:4848 ) \\ Configurations \u2192 server-config \u2192 JVM Options tab.\\ GlassFish CLI \\ asadmin create-jvm-options <new-jvm-option> \\ Manually \\ Add the JVM option to <glassfish-domain-path>/config/domain.xml . Note: This will make the Agent to run every time the webserver restarts. Glassfish autodeploy will not start a new agent. Therefore, after an autodeploy new insertions will not affect the application. WildFly {#_wildfly} \u00b6 In order to configure WildFly to use Lightruns agent we need to add the path to the app war file as an additional parameter to the JAVA_OPTS: -agentpath:<install_dir>/agent/lightrun_agent.so = --lightrun_extra_class_path = <widlfly-deploy-path>/<app-name.war>. e.g. '--lightrun_extra_class_path=/opt/jboss/wildfly/standalone/deployments/myapp.war' The following is checked on CentOS 7.6/WildFly 18 (official WildFly Docker image) The JAVA_OPTS is in the standalone.conf file which is in /opt/jboss/wildfly/bin/ The default server logs are in /opt/jboss/wildfly/standalone/log/server.log To deploy the app copy a .war file to the deployment dir /opt/jboss/wildfly/standalone/deployments/ To redeploy an app, copy a new file to the deployment dir and then run touch <app_name>.war in the same dir. Then see /opt/jboss/wildfly/standalone/log/server.log to verify The above approach will stop agent from functioning properly To make it work, restart the WildFly - How to start/stop the WildFly server Jetty {#_jetty} \u00b6 We need to create a new file /var/lib/jetty/start.d/lightrun.ini with the following content: --exec -agentpath:<install_dir>/agent/lightrun_agent.so Weblogic {#_weblogic} \u00b6 In order to configure Weblogic to use Lightruns agent we need to: Add the path to the app ear file as an additional parameter to the JAVA_OPTS: -agentpath:<install_dir>/agent/lightrun_agent.so = --lightrun_extra_class_path = <weblogic-deploy-path>/<app-name.ear>. e.g. '--lightrun_extra_class_path=Oracle/Middleware/user_projects/domains/mydomain/deployments/myapp.ear' Tell Weblogic server to use the sun Http Handlers and not install its own: -DUseSunHttpHandler = true There are several methods to add those jvm options: To all servers \\ Add the JVM option to Oracle/Middleware/user_projects/domains/<your-domain>/bin/setDomainEnv.sh where JAVA_OPTIONS is set Through the Admin panel (usually http://localhost:7001/console ) \\ Press Lock & Edit, then: Environment \u2192 Servers \u2192 \\<Wanted-Server> \u2192 Server Start \u2192 Arguments\\ Note: This will make the Agent run every time the server restarts.","title":"Integrations"},{"location":"integration/#agent-integrations-integrations","text":"Every application server has its own way of customizing jvm arguments.","title":"Agent Integrations {#integrations}"},{"location":"integration/#tomcat-_tomcat","text":"In order to configure Tomcat to use Lightruns agent we need to add the path to the app war file as an additional parameter to the JAVA_OPTS: -agentpath:<install_dir>/agent/lightrun_agent.so = --lightrun_extra_class_path = <tomcat-path>/webapps/<app-name.war> Please restart the server: ./catalina.sh stop ./catalina.sh start Note: This will make the Agent to run every time the webserver restarts. Tomcat autodeploy will not start a new agent. Therefore, after an autodeploy new insertions will not affect the application.","title":"Tomcat {#_tomcat}"},{"location":"integration/#glassfish-_glassfish","text":"In order to configure GlassFish to use Lightruns agent we need to add the following to the runtime jvm options: -agentpath:<install_dir>/agent/lightrun_agent.so = --lightrun_extra_class_path = <glassfish-domain-path>/applications/<app-name>/WEB-INF/classes/ There are several methods to add this jvm option: Through the Admin panel (usually http://localhost:4848 ) \\ Configurations \u2192 server-config \u2192 JVM Options tab.\\ GlassFish CLI \\ asadmin create-jvm-options <new-jvm-option> \\ Manually \\ Add the JVM option to <glassfish-domain-path>/config/domain.xml . Note: This will make the Agent to run every time the webserver restarts. Glassfish autodeploy will not start a new agent. Therefore, after an autodeploy new insertions will not affect the application.","title":"GlassFish {#_glassfish}"},{"location":"integration/#wildfly-_wildfly","text":"In order to configure WildFly to use Lightruns agent we need to add the path to the app war file as an additional parameter to the JAVA_OPTS: -agentpath:<install_dir>/agent/lightrun_agent.so = --lightrun_extra_class_path = <widlfly-deploy-path>/<app-name.war>. e.g. '--lightrun_extra_class_path=/opt/jboss/wildfly/standalone/deployments/myapp.war' The following is checked on CentOS 7.6/WildFly 18 (official WildFly Docker image) The JAVA_OPTS is in the standalone.conf file which is in /opt/jboss/wildfly/bin/ The default server logs are in /opt/jboss/wildfly/standalone/log/server.log To deploy the app copy a .war file to the deployment dir /opt/jboss/wildfly/standalone/deployments/ To redeploy an app, copy a new file to the deployment dir and then run touch <app_name>.war in the same dir. Then see /opt/jboss/wildfly/standalone/log/server.log to verify The above approach will stop agent from functioning properly To make it work, restart the WildFly - How to start/stop the WildFly server","title":"WildFly {#_wildfly}"},{"location":"integration/#jetty-_jetty","text":"We need to create a new file /var/lib/jetty/start.d/lightrun.ini with the following content: --exec -agentpath:<install_dir>/agent/lightrun_agent.so","title":"Jetty {#_jetty}"},{"location":"integration/#weblogic-_weblogic","text":"In order to configure Weblogic to use Lightruns agent we need to: Add the path to the app ear file as an additional parameter to the JAVA_OPTS: -agentpath:<install_dir>/agent/lightrun_agent.so = --lightrun_extra_class_path = <weblogic-deploy-path>/<app-name.ear>. e.g. '--lightrun_extra_class_path=Oracle/Middleware/user_projects/domains/mydomain/deployments/myapp.ear' Tell Weblogic server to use the sun Http Handlers and not install its own: -DUseSunHttpHandler = true There are several methods to add those jvm options: To all servers \\ Add the JVM option to Oracle/Middleware/user_projects/domains/<your-domain>/bin/setDomainEnv.sh where JAVA_OPTIONS is set Through the Admin panel (usually http://localhost:7001/console ) \\ Press Lock & Edit, then: Environment \u2192 Servers \u2192 \\<Wanted-Server> \u2192 Server Start \u2192 Arguments\\ Note: This will make the Agent run every time the server restarts.","title":"Weblogic {#_weblogic}"},{"location":"opensource/","text":"Opensource libraries {#_opensource_libraries} \u00b6 We love open source libraries and use the following in our product. Some of these are listed under multiple software licenses, and in that case we have listed the license we've chosen to use. Java Agent Licenses {#_java_agent_licenses} \u00b6 +------------------------------------------+---------------------------+ | Software | License | +==========================================+===========================+ | jvmti agent | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-annotations-2.9.0 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-core-2.9.8 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-databind-2.9.8 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson.core.JsonFactory | apache-2.0 | +------------------------------------------+---------------------------+ | athena_internals | apache-2.0 | +------------------------------------------+---------------------------+ | cdbg_java_agent_internals | apache-2.0 | +------------------------------------------+---------------------------+ | commons-logging | apache-2.0 | +------------------------------------------+---------------------------+ | httpclient | apache-2.0 | +------------------------------------------+---------------------------+ | httpcore | apache-2.0 | +------------------------------------------+---------------------------+ | snakeyamll | apache-2.0 | +------------------------------------------+---------------------------+ | asm | bsd-new | +------------------------------------------+---------------------------+ | gflags-2.1.2 | bsd-new | +------------------------------------------+---------------------------+ | glog-0.3.4 | bsd-new | +------------------------------------------+---------------------------+ | open-source-parsers-jsoncpp | mit | +------------------------------------------+---------------------------+ Plugin Licenses {#_plugin_licenses} \u00b6 +------------------------------------------+---------------------------+ | Software | License | +==========================================+===========================+ | commons-lang3-3.9 | apache-2.0 | +------------------------------------------+---------------------------+ | gson-fire-1.8.3 | mit | +------------------------------------------+---------------------------+ | jsr305-3.0.2 | apache-2.0 | +------------------------------------------+---------------------------+ | nv-websocket-client-2.9 | apache-2.0 | +------------------------------------------+---------------------------+ | okhttp-3.14.2 | apache-2.0 | +------------------------------------------+---------------------------+ | swagger-annotations-1.5.22 | apache-2.0 | +------------------------------------------+---------------------------+ Server Licenses {#_server_licenses} \u00b6 +------------------------------------------+---------------------------+ | Software | License | +==========================================+===========================+ | activation-1.1 | cddl-1.0 | +------------------------------------------+---------------------------+ | attoparser-2.0.5 | apache-2.0 | +------------------------------------------+---------------------------+ | classmate-1.4.0 | apache-2.0 | +------------------------------------------+---------------------------+ | commons-compress-1.18 | apache-2.0 | +------------------------------------------+---------------------------+ | commons-io-2.6 | apache-2.0 | +------------------------------------------+---------------------------+ | commons-lang3-3.8.1 | apache-2.0 | +------------------------------------------+---------------------------+ | ehcache-3.6.3 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-annotations-2.9.0 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-core-2.9.9 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-databind-2.9.9.3 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-dataformat-yaml-2.9.8 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-datatype-hibernate5-2.9.9 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-datatype-hppc-2.9.9.jar | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-datatype-jsr310-2.9.9 | apache-2.0 | +------------------------------------------+---------------------------+ | javax.activation-api | gpl-2.0 | +------------------------------------------+---------------------------+ | javax.el | gpl-2.0 | +------------------------------------------+---------------------------+ | javax.mail | gpl-2.0 | +------------------------------------------+---------------------------+ | javax.servlet-api-4.0.1 | gpl-2.0 | +------------------------------------------+---------------------------+ | javax.transaction-api-1.3 | gpl-2.0 | +------------------------------------------+---------------------------+ | jaxb-api-2.3.1 | gpl-2.0 | +------------------------------------------+---------------------------+ | jb | gpl-2.0 | | oss-annotations-api_1.2_spec-1.0.2.Final | | +------------------------------------------+---------------------------+ | jboss-logging-3.3.3.Final | gpl-2.0 | +------------------------------------------+---------------------------+ | jb | gpl-2.0 | | oss-transaction-api_1.2_spec-1.1.1.Final | | +------------------------------------------+---------------------------+ | jb | gpl-2.0 | | oss-transaction-api_1.2_spec-1.1.1.Final | | +------------------------------------------+---------------------------+ | jboss-websocket-api_1.1_spec-1.1.4.Final | gpl-2.0 | +------------------------------------------+---------------------------+ | jta-1.1 | cddl-1.0 | +------------------------------------------+---------------------------+ | log4j-api-2.11.2 | apache-2.0 | +------------------------------------------+---------------------------+ | log4j-to-slf4j-2.11.2 | apache-2.0 | +------------------------------------------+---------------------------+ | logstash-logback-encoder-6.2 | apache-2.0 | +------------------------------------------+---------------------------+ | mapstruct-1.3.0.Final | apache-2.0 | +------------------------------------------+---------------------------+ | mapstruct-processor-1.3.0.Final | apache-2.0 | +------------------------------------------+---------------------------+ | mysql-connector-java-8.0.17 | gpl-2.0 | +------------------------------------------+---------------------------+ | spring-cl | apache-2.0 | | oud-cloudfoundry-connector-2.0.6.RELEASE | | +------------------------------------------+---------------------------+ | thymeleaf-3.0.11.RELEASE | apache-2.0 | +------------------------------------------+---------------------------+ | thymeleaf-extras-java8time-3.0.4.RELEASE | apache-2.0 | +------------------------------------------+---------------------------+ | thymeleaf-spring5-3.0.11.RELEASE | apache-2.0 | +------------------------------------------+---------------------------+ | unbescape-1.1.6.RELEASE | apache-2.0 | +------------------------------------------+---------------------------+","title":"Lightrun license use"},{"location":"opensource/#opensource-libraries-_opensource_libraries","text":"We love open source libraries and use the following in our product. Some of these are listed under multiple software licenses, and in that case we have listed the license we've chosen to use.","title":"Opensource libraries {#_opensource_libraries}"},{"location":"opensource/#java-agent-licenses-_java_agent_licenses","text":"+------------------------------------------+---------------------------+ | Software | License | +==========================================+===========================+ | jvmti agent | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-annotations-2.9.0 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-core-2.9.8 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-databind-2.9.8 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson.core.JsonFactory | apache-2.0 | +------------------------------------------+---------------------------+ | athena_internals | apache-2.0 | +------------------------------------------+---------------------------+ | cdbg_java_agent_internals | apache-2.0 | +------------------------------------------+---------------------------+ | commons-logging | apache-2.0 | +------------------------------------------+---------------------------+ | httpclient | apache-2.0 | +------------------------------------------+---------------------------+ | httpcore | apache-2.0 | +------------------------------------------+---------------------------+ | snakeyamll | apache-2.0 | +------------------------------------------+---------------------------+ | asm | bsd-new | +------------------------------------------+---------------------------+ | gflags-2.1.2 | bsd-new | +------------------------------------------+---------------------------+ | glog-0.3.4 | bsd-new | +------------------------------------------+---------------------------+ | open-source-parsers-jsoncpp | mit | +------------------------------------------+---------------------------+","title":"Java Agent Licenses {#_java_agent_licenses}"},{"location":"opensource/#plugin-licenses-_plugin_licenses","text":"+------------------------------------------+---------------------------+ | Software | License | +==========================================+===========================+ | commons-lang3-3.9 | apache-2.0 | +------------------------------------------+---------------------------+ | gson-fire-1.8.3 | mit | +------------------------------------------+---------------------------+ | jsr305-3.0.2 | apache-2.0 | +------------------------------------------+---------------------------+ | nv-websocket-client-2.9 | apache-2.0 | +------------------------------------------+---------------------------+ | okhttp-3.14.2 | apache-2.0 | +------------------------------------------+---------------------------+ | swagger-annotations-1.5.22 | apache-2.0 | +------------------------------------------+---------------------------+","title":"Plugin Licenses {#_plugin_licenses}"},{"location":"opensource/#server-licenses-_server_licenses","text":"+------------------------------------------+---------------------------+ | Software | License | +==========================================+===========================+ | activation-1.1 | cddl-1.0 | +------------------------------------------+---------------------------+ | attoparser-2.0.5 | apache-2.0 | +------------------------------------------+---------------------------+ | classmate-1.4.0 | apache-2.0 | +------------------------------------------+---------------------------+ | commons-compress-1.18 | apache-2.0 | +------------------------------------------+---------------------------+ | commons-io-2.6 | apache-2.0 | +------------------------------------------+---------------------------+ | commons-lang3-3.8.1 | apache-2.0 | +------------------------------------------+---------------------------+ | ehcache-3.6.3 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-annotations-2.9.0 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-core-2.9.9 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-databind-2.9.9.3 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-dataformat-yaml-2.9.8 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-datatype-hibernate5-2.9.9 | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-datatype-hppc-2.9.9.jar | apache-2.0 | +------------------------------------------+---------------------------+ | jackson-datatype-jsr310-2.9.9 | apache-2.0 | +------------------------------------------+---------------------------+ | javax.activation-api | gpl-2.0 | +------------------------------------------+---------------------------+ | javax.el | gpl-2.0 | +------------------------------------------+---------------------------+ | javax.mail | gpl-2.0 | +------------------------------------------+---------------------------+ | javax.servlet-api-4.0.1 | gpl-2.0 | +------------------------------------------+---------------------------+ | javax.transaction-api-1.3 | gpl-2.0 | +------------------------------------------+---------------------------+ | jaxb-api-2.3.1 | gpl-2.0 | +------------------------------------------+---------------------------+ | jb | gpl-2.0 | | oss-annotations-api_1.2_spec-1.0.2.Final | | +------------------------------------------+---------------------------+ | jboss-logging-3.3.3.Final | gpl-2.0 | +------------------------------------------+---------------------------+ | jb | gpl-2.0 | | oss-transaction-api_1.2_spec-1.1.1.Final | | +------------------------------------------+---------------------------+ | jb | gpl-2.0 | | oss-transaction-api_1.2_spec-1.1.1.Final | | +------------------------------------------+---------------------------+ | jboss-websocket-api_1.1_spec-1.1.4.Final | gpl-2.0 | +------------------------------------------+---------------------------+ | jta-1.1 | cddl-1.0 | +------------------------------------------+---------------------------+ | log4j-api-2.11.2 | apache-2.0 | +------------------------------------------+---------------------------+ | log4j-to-slf4j-2.11.2 | apache-2.0 | +------------------------------------------+---------------------------+ | logstash-logback-encoder-6.2 | apache-2.0 | +------------------------------------------+---------------------------+ | mapstruct-1.3.0.Final | apache-2.0 | +------------------------------------------+---------------------------+ | mapstruct-processor-1.3.0.Final | apache-2.0 | +------------------------------------------+---------------------------+ | mysql-connector-java-8.0.17 | gpl-2.0 | +------------------------------------------+---------------------------+ | spring-cl | apache-2.0 | | oud-cloudfoundry-connector-2.0.6.RELEASE | | +------------------------------------------+---------------------------+ | thymeleaf-3.0.11.RELEASE | apache-2.0 | +------------------------------------------+---------------------------+ | thymeleaf-extras-java8time-3.0.4.RELEASE | apache-2.0 | +------------------------------------------+---------------------------+ | thymeleaf-spring5-3.0.11.RELEASE | apache-2.0 | +------------------------------------------+---------------------------+ | unbescape-1.1.6.RELEASE | apache-2.0 | +------------------------------------------+---------------------------+","title":"Server Licenses {#_server_licenses}"},{"location":"plugin/","text":"Use IntelliJ plugin to integrate debugging with your development workflow. Prerequisites \u00b6 To use the plugin, make sure you: - Your admin needs to install and configure the agent and register it from the relevant app server - Install the plugin in your local IntelliJ instance Make sure you're connected to Lightrun \u00b6 From IntelliJ, click the sidedrawer to expand it. Click the red panel from the top of the plugin display. The browser opens to the Lightrun login page: ! [ Login Dialog ](.. / .. / img / login - dialog . png ) Once we log in successfully the status button on the top right corner should turn green: At this point the right click context menu changes and should include additional options as such: Usage {#_usage} \u00b6 ::: {.important} The plugin will hide options if there are no agents connected to the backend and no tags ::: On the right side we see the Lightrun side drawer. It includes a tree of agents/tags and the actions connected to them: ::: {.tip} This drawer can be folded to save screen real estate ::: The drawer includes all the high level information you might need: We can search within agents and action below and the list updates immediately based on the search query. When we have multiple logs on multiple agents this can be very useful. We have multiple indicators and capabilities for every agent. Most of these are applicable for actions under tags as well so we'll focus only on the agent here: Tags\u2009---\u2009this is the list of tags for this agent. Notice that it's cropped. To see all the tags we will need to expand the drawer or click the details (info) icon to see the list of tags there Details\u2009---\u2009shows the information dialog for the agent/action Hide Logs\u2009---\u2009Logs might be intrusive in the IDE UI. We can fold/hide them using this button. Notice it works recursively and will apply to the hierarchy below Pipe Logs\u2009---\u2009By default Lightrun logs into the same logger used by the host applicaion. However, it has 3 modes: Server Only (the default), Plugin Only and Both . When set to Plugin Only or Both logs added to this agent will show in the Lightrun console Delete Action\u2009---\u2009Allows us to delete an action. Notice that actions defined in a tag can be deleted through the tag only Go to Line\u2009---\u2009Jumps to the source/line number associated with the action Status Indicator\u2009---\u2009Indicates the current state of the action. One check box indicates the action was submitted to the server. Two check boxes indicate that it was received by the agent. Highlighted checkboxes indicate that the agent accepted the action and deems it valid Log Level Indicator\u2009---\u2009Indicates the log level from Info to Error When we press the details button on an agent we can see the following dialog with details about the piping mode, tags etc: This is the equivalent dialog for a log entry: Adding an Action {#_adding_an_action} \u00b6 All actions are added via the right click menu. Select a specific line in the code, right click and select the appropriate action e.g. Log as shown here: There are several options in the new/edit log dialog: Agent\u2009---\u2009The agent or tag to which we will bind the action File/Line\u2009---\u2009The actions position in the code Format\u2009---\u2009This is the actual log string. Notice we can use expressions such as My variable is {var} including even method invocations such as: Method value: {myMethod() + 5} Log Level\u2009---\u2009One of \\\"Debug\\\", \\\"Info\\\", \\\"Warning\\\" or \\\"Error\\\". We can then filter the logs based on this level Condition\u2009---\u2009an expression that limits the action, this is effectively the condition of an if statement we can use to limit the execution of the action e.g.: myVar % 7 == 0 will limit the log so it will print only for variables that divide by 7 Once we press OK a log is added to the area above the line: ::: {.tip} The picture on the left can be customized the at gravatar.com ::: Clicking the log lets us delete or edit it. Almost all of this applies to the other actions supported by Lightrun. So we'll review the other options by focusing on how they differ from logs. Snapshot (Breakpoint) {#_snapshot_breakpoint} \u00b6 A snapshot is a one time \\\"breakpoint\\\" that doesn't block. It just grabs the stack trace and variables then proceeds on its way. Format and log level aren't needed in snapshots so they're unavailable here. However, we have the expression list which lets us pick expressions we wish to add to the snapshot. The added snapshot is displayed in the gutter on the left side: When the snapshot receives a hit it's shown in the bottom area of the window in the Lightrun Snapshots area. The snapshot result should be familiar to IntelliJ users as it's based on the design of the debugger UI. The navigable stack trace is on the left and the variable values are on the right. Watch expressions also appear on the right hand side. When the snapshot is deleted the content of the captured stack is also removed. Counter {#_counter} \u00b6 We often want to know the number of times a specific line of code was hit especially in comparison to a different line of code. This can be very useful in debugging issues and especially in tracking performance problems. Counter does just that. It counts every time the given line was reached and periodically logs that information to the standard logger. A counter doesn't have a format but it has a name which is used to in the printouts to distinguish one counter from another. ::: {.tip} Counter is impacted by the piping mode, so we can pipe the counter calls to the IDE for convenience ::: Set-Value {#_set_value} \u00b6 One trick in debugging is the ability to set a variable to a different value and force a specific code path. In our case this takes a much deeper meaning of patching broken behavior. E.g. if a feature fails and it's surrounded by an if statement we might be able to disable that feature by setting the value of a variable. This is an extremely risky proposition and as such it requires the set-value role for a user. Otherwise the feature isn't available or even visible. When adding a set-value action we define a left side argument which is the variable name and a right side element which is the value assigned. The latter can be any valid expression including a method invocation. ::: {.important} Quotas aren't imposed on set-value operations and as such the performance impact can be significant. Use this feature with caution ::: Lightrun Console/Log Piping {#_lightrun_consolelog_piping} \u00b6 Lightrun logs are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements which might provide further nuance to solve the problem. However, in some cases a developer might want to see the log output in the IDE. For that we have the Lightrun Console at the bottom of the screen: Logs created by Lightrun can be redirected to the console where we can search and filter them. To do that we need to define log piping which we define on a per-agent basis. There are 3 levels of log piping: App Plugin Both App indicates the logs appear only in the Java application as they do by default. They just go to the standard logger. Plugin indicates that logs won't show in the app. Instead they will display within the console below. Both indicates that logs wll appear both in the app and in the plugin. ::: {.note} In order to pipe the logs they need to go from the agent to the backend server and to the plugin. This process is batched so logs appear in batches and with some delay :::","title":"Using lightrun in your workflow"},{"location":"plugin/#prerequisites","text":"To use the plugin, make sure you: - Your admin needs to install and configure the agent and register it from the relevant app server - Install the plugin in your local IntelliJ instance","title":"Prerequisites"},{"location":"plugin/#make-sure-youre-connected-to-lightrun","text":"From IntelliJ, click the sidedrawer to expand it. Click the red panel from the top of the plugin display. The browser opens to the Lightrun login page: ! [ Login Dialog ](.. / .. / img / login - dialog . png ) Once we log in successfully the status button on the top right corner should turn green: At this point the right click context menu changes and should include additional options as such:","title":"Make sure you're connected to Lightrun"},{"location":"plugin/#usage-_usage","text":"::: {.important} The plugin will hide options if there are no agents connected to the backend and no tags ::: On the right side we see the Lightrun side drawer. It includes a tree of agents/tags and the actions connected to them: ::: {.tip} This drawer can be folded to save screen real estate ::: The drawer includes all the high level information you might need: We can search within agents and action below and the list updates immediately based on the search query. When we have multiple logs on multiple agents this can be very useful. We have multiple indicators and capabilities for every agent. Most of these are applicable for actions under tags as well so we'll focus only on the agent here: Tags\u2009---\u2009this is the list of tags for this agent. Notice that it's cropped. To see all the tags we will need to expand the drawer or click the details (info) icon to see the list of tags there Details\u2009---\u2009shows the information dialog for the agent/action Hide Logs\u2009---\u2009Logs might be intrusive in the IDE UI. We can fold/hide them using this button. Notice it works recursively and will apply to the hierarchy below Pipe Logs\u2009---\u2009By default Lightrun logs into the same logger used by the host applicaion. However, it has 3 modes: Server Only (the default), Plugin Only and Both . When set to Plugin Only or Both logs added to this agent will show in the Lightrun console Delete Action\u2009---\u2009Allows us to delete an action. Notice that actions defined in a tag can be deleted through the tag only Go to Line\u2009---\u2009Jumps to the source/line number associated with the action Status Indicator\u2009---\u2009Indicates the current state of the action. One check box indicates the action was submitted to the server. Two check boxes indicate that it was received by the agent. Highlighted checkboxes indicate that the agent accepted the action and deems it valid Log Level Indicator\u2009---\u2009Indicates the log level from Info to Error When we press the details button on an agent we can see the following dialog with details about the piping mode, tags etc: This is the equivalent dialog for a log entry:","title":"Usage {#_usage}"},{"location":"plugin/#adding-an-action-_adding_an_action","text":"All actions are added via the right click menu. Select a specific line in the code, right click and select the appropriate action e.g. Log as shown here: There are several options in the new/edit log dialog: Agent\u2009---\u2009The agent or tag to which we will bind the action File/Line\u2009---\u2009The actions position in the code Format\u2009---\u2009This is the actual log string. Notice we can use expressions such as My variable is {var} including even method invocations such as: Method value: {myMethod() + 5} Log Level\u2009---\u2009One of \\\"Debug\\\", \\\"Info\\\", \\\"Warning\\\" or \\\"Error\\\". We can then filter the logs based on this level Condition\u2009---\u2009an expression that limits the action, this is effectively the condition of an if statement we can use to limit the execution of the action e.g.: myVar % 7 == 0 will limit the log so it will print only for variables that divide by 7 Once we press OK a log is added to the area above the line: ::: {.tip} The picture on the left can be customized the at gravatar.com ::: Clicking the log lets us delete or edit it. Almost all of this applies to the other actions supported by Lightrun. So we'll review the other options by focusing on how they differ from logs.","title":"Adding an Action {#_adding_an_action}"},{"location":"plugin/#snapshot-breakpoint-_snapshot_breakpoint","text":"A snapshot is a one time \\\"breakpoint\\\" that doesn't block. It just grabs the stack trace and variables then proceeds on its way. Format and log level aren't needed in snapshots so they're unavailable here. However, we have the expression list which lets us pick expressions we wish to add to the snapshot. The added snapshot is displayed in the gutter on the left side: When the snapshot receives a hit it's shown in the bottom area of the window in the Lightrun Snapshots area. The snapshot result should be familiar to IntelliJ users as it's based on the design of the debugger UI. The navigable stack trace is on the left and the variable values are on the right. Watch expressions also appear on the right hand side. When the snapshot is deleted the content of the captured stack is also removed.","title":"Snapshot (Breakpoint) {#_snapshot_breakpoint}"},{"location":"plugin/#counter-_counter","text":"We often want to know the number of times a specific line of code was hit especially in comparison to a different line of code. This can be very useful in debugging issues and especially in tracking performance problems. Counter does just that. It counts every time the given line was reached and periodically logs that information to the standard logger. A counter doesn't have a format but it has a name which is used to in the printouts to distinguish one counter from another. ::: {.tip} Counter is impacted by the piping mode, so we can pipe the counter calls to the IDE for convenience :::","title":"Counter {#_counter}"},{"location":"plugin/#set-value-_set_value","text":"One trick in debugging is the ability to set a variable to a different value and force a specific code path. In our case this takes a much deeper meaning of patching broken behavior. E.g. if a feature fails and it's surrounded by an if statement we might be able to disable that feature by setting the value of a variable. This is an extremely risky proposition and as such it requires the set-value role for a user. Otherwise the feature isn't available or even visible. When adding a set-value action we define a left side argument which is the variable name and a right side element which is the value assigned. The latter can be any valid expression including a method invocation. ::: {.important} Quotas aren't imposed on set-value operations and as such the performance impact can be significant. Use this feature with caution :::","title":"Set-Value {#_set_value}"},{"location":"plugin/#lightrun-consolelog-piping-_lightrun_consolelog_piping","text":"Lightrun logs are normally printed into the standard logging framework. This is quite valuable as logs can be seen in the context of pre-existing log statements which might provide further nuance to solve the problem. However, in some cases a developer might want to see the log output in the IDE. For that we have the Lightrun Console at the bottom of the screen: Logs created by Lightrun can be redirected to the console where we can search and filter them. To do that we need to define log piping which we define on a per-agent basis. There are 3 levels of log piping: App Plugin Both App indicates the logs appear only in the Java application as they do by default. They just go to the standard logger. Plugin indicates that logs won't show in the app. Instead they will display within the console below. Both indicates that logs wll appear both in the app and in the plugin. ::: {.note} In order to pipe the logs they need to go from the agent to the backend server and to the plugin. This process is batched so logs appear in batches and with some delay :::","title":"Lightrun Console/Log Piping {#_lightrun_consolelog_piping}"},{"location":"server-integrations/","text":"Lightrun comes with working integrations for some of the leading monitoring, alerting and communication platforms. The list of supported integrations is constantly expanding. You can see the updated list of the integrations and configure each of them through the Integrations panel ( Manager \u2192 System Integrations ) :::note Manager role is required to edit integrations. ::: ::: {.note} To see an agent data sent to any of the configured integration, please make sure it's piping status is set to either \\\"Plugin\\\" or \\\"Both\\\". ::: Statsd {#_statsd} \u00b6 Press \\\"Connect\\\" button on Statsd configuration widget Fill \\\"Server\\\" and \\\"UDP Port\\\" fields with the relevant values (default values are displayed) Press \\\"Connect\\\" button and make sure you see the approval toast message Press \\\"Disconnect\\\" button to disable the configuration Prometheus {#_prometheus} \u00b6 Press \\\"Connect\\\" button on Prometheus configuration widget Copy the scrape config to your prometheus.yml file Press \\\"Activate\\\" button and make sure you see the approval toast message To disable the integration, remove the scrape config from the prometheus.yaml file or press \\\"Deactivate\\\" button Datadog {#_datadog} \u00b6 Press \\\"Connect\\\" button on Datadog configuration widget Add your Datadog API key Press \\\"Connect\\\" button and make sure you see the approval toast message To disable the integration press \\\"Disconnect\\\" button Logz.io {#_logz_io} \u00b6 Press \\\"Connect\\\" button on Logz.io configuration widget Fill \\\"URL\\\", \\\"Company\\\" and \\\"Type\\\" fields with the relevant values (default values are displayed) Add your Logz.io token (no default value displayed) Press \\\"Connect\\\" button and make sure you see the approval message To disable the integration, press \\\"Disconnect\\\" button FAQ {#_faq} \u00b6 Make sure the agent piping status set to either \\\"Plugin\\\" or \\\"Both\\\". Wait a few minutes after sending your logs to give the platform time to index and make them available for search. It normally happens from within seconds to one minute, but sometimes it can take longer. Check for network connectivity issues, e.g. firewall configurations Q: I see error toast messages when pressing \\\"Connect\\\" or the \\\"Activate\\\" button.. Make sure you provide proper values for the related fields. Please refer one fo the following: StatsD README Prometheus FAQ Datadog Log Collection Troubleshooting Guide Logz.io shipping troubleshooting guide","title":"Server-side integrations"},{"location":"server-integrations/#statsd-_statsd","text":"Press \\\"Connect\\\" button on Statsd configuration widget Fill \\\"Server\\\" and \\\"UDP Port\\\" fields with the relevant values (default values are displayed) Press \\\"Connect\\\" button and make sure you see the approval toast message Press \\\"Disconnect\\\" button to disable the configuration","title":"Statsd {#_statsd}"},{"location":"server-integrations/#prometheus-_prometheus","text":"Press \\\"Connect\\\" button on Prometheus configuration widget Copy the scrape config to your prometheus.yml file Press \\\"Activate\\\" button and make sure you see the approval toast message To disable the integration, remove the scrape config from the prometheus.yaml file or press \\\"Deactivate\\\" button","title":"Prometheus {#_prometheus}"},{"location":"server-integrations/#datadog-_datadog","text":"Press \\\"Connect\\\" button on Datadog configuration widget Add your Datadog API key Press \\\"Connect\\\" button and make sure you see the approval toast message To disable the integration press \\\"Disconnect\\\" button","title":"Datadog {#_datadog}"},{"location":"server-integrations/#logzio-_logz_io","text":"Press \\\"Connect\\\" button on Logz.io configuration widget Fill \\\"URL\\\", \\\"Company\\\" and \\\"Type\\\" fields with the relevant values (default values are displayed) Add your Logz.io token (no default value displayed) Press \\\"Connect\\\" button and make sure you see the approval message To disable the integration, press \\\"Disconnect\\\" button","title":"Logz.io {#_logz_io}"},{"location":"server-integrations/#faq-_faq","text":"Make sure the agent piping status set to either \\\"Plugin\\\" or \\\"Both\\\". Wait a few minutes after sending your logs to give the platform time to index and make them available for search. It normally happens from within seconds to one minute, but sometimes it can take longer. Check for network connectivity issues, e.g. firewall configurations Q: I see error toast messages when pressing \\\"Connect\\\" or the \\\"Activate\\\" button.. Make sure you provide proper values for the related fields. Please refer one fo the following: StatsD README Prometheus FAQ Datadog Log Collection Troubleshooting Guide Logz.io shipping troubleshooting guide","title":"FAQ {#_faq}"},{"location":"server-setup/","text":"Once you've deployed the agent on your application servers, it's time to kickstart debugging for your team. Have team members install the plugin for IntelliJ or the CLI , and follow these steps: - launch the backend - launch an agent - start debugging Launch the backend \u00b6 From the relevant application servers run the following command: service lightrund start Alternatively, you can run the backend from a Docker file as follows: docker-compose up -d . Launch an agent \u00b6 Run an application instance with the agent attached. 1. Copy the following command and replace <install_dir> with the installation directory. java -agentpath:<install_dir>/agent/lightrun_agent.so java-app \\ 2. Run the command. Start debugging \u00b6 So long as the application is running with the agent, you and your team can debug! Use the plugin or CLI to add actions and debug the app.","title":"Start debugging with your team"},{"location":"server-setup/#launch-the-backend","text":"From the relevant application servers run the following command: service lightrund start Alternatively, you can run the backend from a Docker file as follows: docker-compose up -d .","title":"Launch the backend"},{"location":"server-setup/#launch-an-agent","text":"Run an application instance with the agent attached. 1. Copy the following command and replace <install_dir> with the installation directory. java -agentpath:<install_dir>/agent/lightrun_agent.so java-app \\ 2. Run the command.","title":"Launch an agent"},{"location":"server-setup/#start-debugging","text":"So long as the application is running with the agent, you and your team can debug! Use the plugin or CLI to add actions and debug the app.","title":"Start debugging"},{"location":"troubleshooting/","text":"Common issues include the following. Agents don't show up in IDE. Try: Restarting the IDE Logging in again Username Field is Disabled in Login. Try: Make sure the backend server is reachable Make sure the URL/port were typed correctly Try deleting and retyping a character in the URL to trigger validation again Make sure there are no hidden characters/spaces before/after the URL This notification warning pops up when one or more actions in the open file were set against different source code. This might happen if you set an action after making edits to the file, or if an action was set to the same file by another person whose source code differs from yours. This warning can be ignored, as it doesn't block the activation of the action. However, actions set on mismatching source code can cause unexpected behavior, so it is recommended to solve the issue. To solve the issue, make sure that the application you are debugging is the same as the code in your editor (or the editor of whoever set the action). If the problem persists, you can disable the warning by clicking \\\"Don't Show this Again\\\" in the notification panel (Notice that disabling this feature will also affect the actions the way other people view the actions you set). Certificates issues {#_certificates_issues} \u00b6 Self-signed certificate is blocked {#_self_signed_certificate_is_blocked} \u00b6 The troubleshooting may vary depends on either browser (also browser version) or OS, and the following cover most of the popular browsers and operating systems Getting Chrome to accept self-signed localhost certificate (per Chrome version) Ubuntu: Adding a self-signed certificate to the \"trusted list\" Creating and Trusting Self-Signed Certs on MacOS and Chrome/Safari How to trust a self-signed SSL certificate in IE11 and Edge How do you get Chrome to accept a self-signed certificate on Win10","title":"Troubleshooting"},{"location":"troubleshooting/#certificates-issues-_certificates_issues","text":"","title":"Certificates issues {#_certificates_issues}"},{"location":"troubleshooting/#self-signed-certificate-is-blocked-_self_signed_certificate_is_blocked","text":"The troubleshooting may vary depends on either browser (also browser version) or OS, and the following cover most of the popular browsers and operating systems Getting Chrome to accept self-signed localhost certificate (per Chrome version) Ubuntu: Adding a self-signed certificate to the \"trusted list\" Creating and Trusting Self-Signed Certs on MacOS and Chrome/Safari How to trust a self-signed SSL certificate in IE11 and Edge How do you get Chrome to accept a self-signed certificate on Win10","title":"Self-signed certificate is blocked {#_self_signed_certificate_is_blocked}"},{"location":"useradmin/","text":"Server's logs can be found under /tmp/lightrun-backend-server.log . Server Sign-up {#_server_sign_up} Now that the backend server is running we need to create a user and login. We need to navigate in the browser to the server. ::: {.note} Notice that the URL is https and defaults to port 8080 . There should be a self signed certificate warning from the browser! If you are having issues accessing the server from your browser due to a certificate blocking please follow the guidelines in the Troubleshooting certificates issues section ::: Under the account menu we can select register and create a new user account. We can use any details as a verification email isn't sent at this time, however values should be unique. Once registered we can login immediately and should see this UI: Notice this page is scrollable. It includes all of the important instructions required for getting started. Manager Role and Capabilities {#_manager_role_and_capabilities} \u00b6 ::: {.note} This section is only applicable for users with the manager role. You can skip it if you don't have that role ::: The backend server features several roles including: Manager, Set-Value and User. A manager role has additional capabilities to manage users/roles and more. When logged in as a manager we have two additional menus in the top: Manager and Entities. Entities provide information about the currently connected agents, logs and tags. The manager menu provides three options: User management lets us add a new user or delete/edit an existing user. One important feature is the ability to define the role for the created user. It's crucial to provide the right roles to a user otherwise the user won't be able to do anything! In case of a server side error send logs provides an easy way to send logs by email directly from the web UI. The entities menu includes three editable entries, tags is one such entry. The web UI lets us delete tags that are no longer used. We can disable breakpoints insertion in files that might expose sensitive data by configuring blacklist.\\ Files and packages in blacklist section that don't appear in exception section will be protected from breakpoints insertion.\\ On agent startup the blacklist configuration is downloaded and applied to future actions, which means patterns modifications here require agent restart.\\ All users can view the configured blacklist and exceptions. The manager can also create and delete patterns.","title":"Manage users"},{"location":"useradmin/#manager-role-and-capabilities-_manager_role_and_capabilities","text":"::: {.note} This section is only applicable for users with the manager role. You can skip it if you don't have that role ::: The backend server features several roles including: Manager, Set-Value and User. A manager role has additional capabilities to manage users/roles and more. When logged in as a manager we have two additional menus in the top: Manager and Entities. Entities provide information about the currently connected agents, logs and tags. The manager menu provides three options: User management lets us add a new user or delete/edit an existing user. One important feature is the ability to define the role for the created user. It's crucial to provide the right roles to a user otherwise the user won't be able to do anything! In case of a server side error send logs provides an easy way to send logs by email directly from the web UI. The entities menu includes three editable entries, tags is one such entry. The web UI lets us delete tags that are no longer used. We can disable breakpoints insertion in files that might expose sensitive data by configuring blacklist.\\ Files and packages in blacklist section that don't appear in exception section will be protected from breakpoints insertion.\\ On agent startup the blacklist configuration is downloaded and applied to future actions, which means patterns modifications here require agent restart.\\ All users can view the configured blacklist and exceptions. The manager can also create and delete patterns.","title":"Manager Role and Capabilities {#_manager_role_and_capabilities}"},{"location":"userexceptions/","text":"In order to view the exceptions in the plugin click on the \\\"Exceptions\\\" tab at the bottom of the Lightrun window In this view you can view exceptions from today and exceptions from the last month.","title":"View exceptions as a user"}]}